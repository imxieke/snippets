{
	".source.go": {
		"single import": {
			"prefix": "im",
			"body": "import \"${1:package}\"",
			"description": "Snippet for import statement"
		},
		"multiple imports": {
			"prefix": "ims",
			"body": "import (\n\t\"${1:package}\"\n)",
			"description": "Snippet for a import block"
		},
		"single constant": {
			"prefix": "co",
			"body": "const ${1:name} = ${2:value}",
			"description": "Snippet for a constant"
		},
		"multiple constants": {
			"prefix": "cos",
			"body": "const (\n\t${1:name} = ${2:value}\n)",
			"description": "Snippet for a constant block"
		},
		"type function declaration": {
			"prefix": "tyf",
			"body": "type ${1:name} func($3) $4",
			"description": "Snippet for a type function declaration"
		},
		"type interface declaration": {
			"prefix": "tyi",
			"body": "type ${1:name} interface {\n\t$0\n}",
			"description": "Snippet for a type interface"
		},
		"type struct declaration": {
			"prefix": "tys",
			"body": "type ${1:name} struct {\n\t$0\n}",
			"description": "Snippet for a struct declaration"
		},
		"package main and main function": {
			"prefix": "pkgm",
			"body": "package main\n\nfunc main() {\n\t$0\n}",
			"description": "Snippet for main package & function"
		},
		"function declaration": {
			"prefix": "func",
			"body": "func $1($2) $3 {\n\t$0\n}",
			"description": "Snippet for function declaration"
		},
		"variable declaration": {
			"prefix": "var",
			"body": "var ${1:name} ${2:type}",
			"description": "Snippet for a variable"
		},
		"switch statement": {
			"prefix": "switch",
			"body": "switch ${1:expression} {\ncase ${2:condition}:\n\t$0\n}",
			"description": "Snippet for switch statement"
		},
		"select statement": {
			"prefix": "sel",
			"body": "select {\ncase ${1:condition}:\n\t$0\n}",
			"description": "Snippet for select statement"
		},
		"case clause": {
			"prefix": "cs",
			"body": "case ${1:condition}:$0",
			"description": "Snippet for case clause"
		},
		"for statement": {
			"prefix": "for",
			"body": "for ${1:i} := ${2:0}; $1 < ${3:count}; $1${4:++} {\n\t$0\n}",
			"description": "Snippet for a for loop"
		},
		"for range statement": {
			"prefix": "forr",
			"body": "for ${1:_, }${2:v} := range ${3:v} {\n\t$0\n}",
			"description": "Snippet for a for range loop"
		},
		"channel declaration": {
			"prefix": "ch",
			"body": "chan ${1:type}",
			"description": "Snippet for a channel"
		},
		"map declaration": {
			"prefix": "map",
			"body": "map[${1:type}]${2:type}",
			"description": "Snippet for a map"
		},
		"empty interface": {
			"prefix": "in",
			"body": "interface{}",
			"description": "Snippet for empty interface"
		},
		"if statement": {
			"prefix": "if",
			"body": "if ${1:condition} {\n\t$0\n}",
			"description": "Snippet for if statement"
		},
		"else branch": {
			"prefix": "el",
			"body": "else {\n\t$0\n}",
			"description": "Snippet for else branch"
		},
		"if else statement": {
			"prefix": "ie",
			"body": "if ${1:condition} {\n\t$2\n} else {\n\t$0\n}",
			"description": "Snippet for if else"
		},
		"if err != nil": {
			"prefix": "iferr",
			"body": "if err != nil {\n\t${1:return ${2:nil, }${3:err}}\n}",
			"description": "Snippet for if err != nil"
		},
		"fmt.Println": {
			"prefix": "fp",
			"body": "fmt.Println(\"$1\")",
			"description": "Snippet for fmt.Println()"
		},
		"fmt.Printf": {
			"prefix": "ff",
			"body": "fmt.Printf(\"$1\", ${2:var})",
			"description": "Snippet for fmt.Printf()"
		},
		"log.Println": {
			"prefix": "lp",
			"body": "log.Println(\"$1\")",
			"description": "Snippet for log.Println()"
		},
		"log.Printf": {
			"prefix": "lf",
			"body": "log.Printf(\"$1\", ${2:var})",
			"description": "Snippet for log.Printf()"
		},
		"log variable content": {
			"prefix": "lv",
			"body": "log.Printf(\"${1:var}: %#+v\\\\n\", ${1:var})",
			"description": "Snippet for log.Printf() with variable content"
		},
		"t.Log": {
			"prefix": "tl",
			"body": "t.Log(\"$1\")",
			"description": "Snippet for t.Log()"
		},
		"t.Logf": {
			"prefix": "tlf",
			"body": "t.Logf(\"$1\", ${2:var})",
			"description": "Snippet for t.Logf()"
		},
		"t.Logf variable content": {
			"prefix": "tlv",
			"body": "t.Logf(\"${1:var}: %#+v\\\\n\", ${1:var})",
			"description": "Snippet for t.Logf() with variable content"
		},
		"make(...)": {
			"prefix": "make",
			"body": "make(${1:type}, ${2:0})",
			"description": "Snippet for make statement"
		},
		"new(...)": {
			"prefix": "new",
			"body": "new(${1:type})",
			"description": "Snippet for new statement"
		},
		"panic(...)": {
			"prefix": "pn",
			"body": "panic(\"$0\")",
			"description": "Snippet for panic"
		},
		"http ResponseWriter *Request": {
			"prefix": "wr",
			"body": "${1:w} http.ResponseWriter, ${2:r} *http.Request",
			"description": "Snippet for http Response"
		},
		"http.HandleFunc": {
			"prefix": "hf",
			"body": "${1:http}.HandleFunc(\"${2:/}\", ${3:handler})",
			"description": "Snippet for http.HandleFunc()"
		},
		"http handler declaration": {
			"prefix": "hand",
			"body": "func $1(${2:w} http.ResponseWriter, ${3:r} *http.Request) {\n\t$0\n}",
			"description": "Snippet for http handler declaration"
		},
		"http.Redirect": {
			"prefix": "rd",
			"body": "http.Redirect(${1:w}, ${2:r}, \"${3:/}\", ${4:http.StatusFound})",
			"description": "Snippet for http.Redirect()"
		},
		"http.Error": {
			"prefix": "herr",
			"body": "http.Error(${1:w}, ${2:err}.Error(), ${3:http.StatusInternalServerError})",
			"description": "Snippet for http.Error()"
		},
		"http.ListenAndServe": {
			"prefix": "las",
			"body": "http.ListenAndServe(\"${1::8080}\", ${2:nil})",
			"description": "Snippet for http.ListenAndServe"
		},
		"http.Serve": {
			"prefix": "sv",
			"body": "http.Serve(\"${1::8080}\", ${2:nil})",
			"description": "Snippet for http.Serve"
		},
		"goroutine anonymous function": {
			"prefix": "go",
			"body": "go func($1) {\n\t$0\n}($2)",
			"description": "Snippet for anonymous goroutine declaration"
		},
		"goroutine function": {
			"prefix": "gf",
			"body": "go ${1:func}($0)",
			"description": "Snippet for goroutine declaration"
		},
		"defer statement": {
			"prefix": "df",
			"body": "defer ${1:func}($0)",
			"description": "Snippet for defer statement"
		},
		"test function": {
			"prefix": "tf",
			"body": "func Test$1(t *testing.T) {\n\t$0\n}",
			"description": "Snippet for Test function"
		},
		"test main": {
			"prefix": "tm",
			"body": "func TestMain(m *testing.M) {\n\t$1\n\n\tos.Exit(m.Run())\n}",
			"description": "Snippet for TestMain function"
		},
		"benchmark function": {
			"prefix": "bf",
			"body": "func Benchmark$1(b *testing.B) {\n\tfor ${2:i} := 0; ${2:i} < b.N; ${2:i}++ {\n\t\t$0\n\t}\n}",
			"description": "Snippet for Benchmark function"
		},
		"example function": {
			"prefix": "ef",
			"body": "func Example$1() {\n\t$2\n\t//Output:\n\t$3\n}",
			"description": "Snippet for Example function"
		},
		"table driven test": {
			"prefix": "tdt",
			"body": "func Test$1(t *testing.T) {\n\ttestCases := []struct {\n\t\tdesc\tstring\n\t\t$2\n\t}{\n\t\t{\n\t\t\tdesc: \"$3\",\n\t\t\t$4\n\t\t},\n\t}\n\tfor _, tC := range testCases {\n\t\tt.Run(tC.desc, func(t *testing.T) {\n\t\t\t$0\n\t\t})\n\t}\n}",
			"description": "Snippet for table driven test"
		},
		"init function": {
			"prefix": "finit",
			"body": "func init() {\n\t$1\n}",
			"description": "Snippet for init function"
		},
		"main function": {
			"prefix": "fmain",
			"body": "func main() {\n\t$1\n}",
			"description": "Snippet for main function"
		},
		"method declaration": {
			"prefix": "meth",
			"body": "func (${1:receiver} ${2:type}) ${3:method}($4) $5 {\n\t$0\n}",
			"description": "Snippet for method declaration"
		},
		"hello world web app": {
			"prefix": "helloweb",
			"body": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc greet(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World! %s\", time.Now())\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", greet)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
			"description": "Snippet for sample hello world webapp"
		},
		"sort implementation": {
			"prefix": "sort",
			"body": "type ${1:SortBy} []${2:Type}\n\nfunc (a $1) Len() int           { return len(a) }\nfunc (a $1) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }\nfunc (a $1) Less(i, j int) bool { ${3:return a[i] < a[j]} }",
			"description": "Snippet for a custom sort.Sort interface implementation, for a given slice type."
		}
	},
	"single import": {
		"prefix": "im",
		"body": "import \"${1:package}\"",
		"description": "Snippet for import statement"
	},
	"multiple imports": {
		"prefix": "ims",
		"body": "import (\n\t\"${1:package}\"\n)",
		"description": "Snippet for a import block"
	},
	"single constant": {
		"prefix": "co",
		"body": "const ${1:name} = ${2:value}",
		"description": "Snippet for a constant"
	},
	"multiple constants": {
		"prefix": "cos",
		"body": "const (\n\t${1:name} = ${2:value}\n)",
		"description": "Snippet for a constant block"
	},
	"type function declaration": {
		"prefix": "tyf",
		"body": "type ${1:name} func($3) $4",
		"description": "Snippet for a type function declaration"
	},
	"type interface declaration": {
		"prefix": "tyi",
		"body": "type ${1:name} interface {\n\t$0\n}",
		"description": "Snippet for a type interface"
	},
	"type struct declaration": {
		"prefix": "tys",
		"body": "type ${1:name} struct {\n\t$0\n}",
		"description": "Snippet for a struct declaration"
	},
	"package main and main function": {
		"prefix": "pkgm",
		"body": "package main\n\nfunc main() {\n\t$0\n}",
		"description": "Snippet for main package & function"
	},
	"function declaration": {
		"prefix": "func",
		"body": "func $1($2) $3 {\n\t$0\n}",
		"description": "Snippet for function declaration"
	},
	"variable declaration": {
		"prefix": "var",
		"body": "var ${1:name} ${2:type}",
		"description": "Snippet for a variable"
	},
	"switch statement": {
		"prefix": "switch",
		"body": "switch ${1:expression} {\ncase ${2:condition}:\n\t$0\n}",
		"description": "Snippet for switch statement"
	},
	"select statement": {
		"prefix": "sel",
		"body": "select {\ncase ${1:condition}:\n\t$0\n}",
		"description": "Snippet for select statement"
	},
	"case clause": {
		"prefix": "cs",
		"body": "case ${1:condition}:$0",
		"description": "Snippet for case clause"
	},
	"for statement": {
		"prefix": "for",
		"body": "for ${1:i} := ${2:0}; $1 < ${3:count}; $1${4:++} {\n\t$0\n}",
		"description": "Snippet for a for loop"
	},
	"for range statement": {
		"prefix": "forr",
		"body": "for ${1:_, }${2:v} := range ${3:v} {\n\t$0\n}",
		"description": "Snippet for a for range loop"
	},
	"channel declaration": {
		"prefix": "ch",
		"body": "chan ${1:type}",
		"description": "Snippet for a channel"
	},
	"map declaration": {
		"prefix": "map",
		"body": "map[${1:type}]${2:type}",
		"description": "Snippet for a map"
	},
	"empty interface": {
		"prefix": "in",
		"body": "interface{}",
		"description": "Snippet for empty interface"
	},
	"if statement": {
		"prefix": "if",
		"body": "if ${1:condition} {\n\t$0\n}",
		"description": "Snippet for if statement"
	},
	"else branch": {
		"prefix": "el",
		"body": "else {\n\t$0\n}",
		"description": "Snippet for else branch"
	},
	"if else statement": {
		"prefix": "ie",
		"body": "if ${1:condition} {\n\t$2\n} else {\n\t$0\n}",
		"description": "Snippet for if else"
	},
	"if err != nil": {
		"prefix": "iferr",
		"body": "if err != nil {\n\t${1:return ${2:nil, }${3:err}}\n}",
		"description": "Snippet for if err != nil"
	},
	"fmt.Println": {
		"prefix": "fp",
		"body": "fmt.Println(\"$1\")",
		"description": "Snippet for fmt.Println()"
	},
	"fmt.Printf": {
		"prefix": "ff",
		"body": "fmt.Printf(\"$1\", ${2:var})",
		"description": "Snippet for fmt.Printf()"
	},
	"log.Println": {
		"prefix": "lp",
		"body": "log.Println(\"$1\")",
		"description": "Snippet for log.Println()"
	},
	"log.Printf": {
		"prefix": "lf",
		"body": "log.Printf(\"$1\", ${2:var})",
		"description": "Snippet for log.Printf()"
	},
	"log variable content": {
		"prefix": "lv",
		"body": "log.Printf(\"${1:var}: %#+v\\\\n\", ${1:var})",
		"description": "Snippet for log.Printf() with variable content"
	},
	"t.Log": {
		"prefix": "tl",
		"body": "t.Log(\"$1\")",
		"description": "Snippet for t.Log()"
	},
	"t.Logf": {
		"prefix": "tlf",
		"body": "t.Logf(\"$1\", ${2:var})",
		"description": "Snippet for t.Logf()"
	},
	"t.Logf variable content": {
		"prefix": "tlv",
		"body": "t.Logf(\"${1:var}: %#+v\\\\n\", ${1:var})",
		"description": "Snippet for t.Logf() with variable content"
	},
	"make(...)": {
		"prefix": "make",
		"body": "make(${1:type}, ${2:0})",
		"description": "Snippet for make statement"
	},
	"new(...)": {
		"prefix": "new",
		"body": "new(${1:type})",
		"description": "Snippet for new statement"
	},
	"panic(...)": {
		"prefix": "pn",
		"body": "panic(\"$0\")",
		"description": "Snippet for panic"
	},
	"http ResponseWriter *Request": {
		"prefix": "wr",
		"body": "${1:w} http.ResponseWriter, ${2:r} *http.Request",
		"description": "Snippet for http Response"
	},
	"http.HandleFunc": {
		"prefix": "hf",
		"body": "${1:http}.HandleFunc(\"${2:/}\", ${3:handler})",
		"description": "Snippet for http.HandleFunc()"
	},
	"http handler declaration": {
		"prefix": "hand",
		"body": "func $1(${2:w} http.ResponseWriter, ${3:r} *http.Request) {\n\t$0\n}",
		"description": "Snippet for http handler declaration"
	},
	"http.Redirect": {
		"prefix": "rd",
		"body": "http.Redirect(${1:w}, ${2:r}, \"${3:/}\", ${4:http.StatusFound})",
		"description": "Snippet for http.Redirect()"
	},
	"http.Error": {
		"prefix": "herr",
		"body": "http.Error(${1:w}, ${2:err}.Error(), ${3:http.StatusInternalServerError})",
		"description": "Snippet for http.Error()"
	},
	"http.ListenAndServe": {
		"prefix": "las",
		"body": "http.ListenAndServe(\"${1::8080}\", ${2:nil})",
		"description": "Snippet for http.ListenAndServe"
	},
	"http.Serve": {
		"prefix": "sv",
		"body": "http.Serve(\"${1::8080}\", ${2:nil})",
		"description": "Snippet for http.Serve"
	},
	"goroutine anonymous function": {
		"prefix": "go",
		"body": "go func($1) {\n\t$0\n}($2)",
		"description": "Snippet for anonymous goroutine declaration"
	},
	"goroutine function": {
		"prefix": "gf",
		"body": "go ${1:func}($0)",
		"description": "Snippet for goroutine declaration"
	},
	"defer statement": {
		"prefix": "df",
		"body": "defer ${1:func}($0)",
		"description": "Snippet for defer statement"
	},
	"test function": {
		"prefix": "tf",
		"body": "func Test$1(t *testing.T) {\n\t$0\n}",
		"description": "Snippet for Test function"
	},
	"test main": {
		"prefix": "tm",
		"body": "func TestMain(m *testing.M) {\n\t$1\n\n\tos.Exit(m.Run())\n}",
		"description": "Snippet for TestMain function"
	},
	"benchmark function": {
		"prefix": "bf",
		"body": "func Benchmark$1(b *testing.B) {\n\tfor ${2:i} := 0; ${2:i} < b.N; ${2:i}++ {\n\t\t$0\n\t}\n}",
		"description": "Snippet for Benchmark function"
	},
	"example function": {
		"prefix": "ef",
		"body": "func Example$1() {\n\t$2\n\t//Output:\n\t$3\n}",
		"description": "Snippet for Example function"
	},
	"table driven test": {
		"prefix": "tdt",
		"body": "func Test$1(t *testing.T) {\n\ttestCases := []struct {\n\t\tdesc\tstring\n\t\t$2\n\t}{\n\t\t{\n\t\t\tdesc: \"$3\",\n\t\t\t$4\n\t\t},\n\t}\n\tfor _, tC := range testCases {\n\t\tt.Run(tC.desc, func(t *testing.T) {\n\t\t\t$0\n\t\t})\n\t}\n}",
		"description": "Snippet for table driven test"
	},
	"init function": {
		"prefix": "finit",
		"body": "func init() {\n\t$1\n}",
		"description": "Snippet for init function"
	},
	"main function": {
		"prefix": "fmain",
		"body": "func main() {\n\t$1\n}",
		"description": "Snippet for main function"
	},
	"method declaration": {
		"prefix": "meth",
		"body": "func (${1:receiver} ${2:type}) ${3:method}($4) $5 {\n\t$0\n}",
		"description": "Snippet for method declaration"
	},
	"hello world web app": {
		"prefix": "helloweb",
		"body": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc greet(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World! %s\", time.Now())\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", greet)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
		"description": "Snippet for sample hello world webapp"
	},
	"sort implementation": {
		"prefix": "sort",
		"body": "type ${1:SortBy} []${2:Type}\n\nfunc (a $1) Len() int           { return len(a) }\nfunc (a $1) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }\nfunc (a $1) Less(i, j int) bool { ${3:return a[i] < a[j]} }",
		"description": "Snippet for a custom sort.Sort interface implementation, for a given slice type."
	},
	"Package": {
		"prefix": "pa",
		"body": [
			"// Package $1 provides $2",
			"package $1"
		]
	},
	"Switch": {
		"prefix": "sw",
		"body": [
			"switch $1 {",
			"  case $2:",
			"    $0",
			"  default:",
			"    // TODO: implement",
			"}"
		]
	},
	"Main": {
		"prefix": "main",
		"body": [
			"package main",
			"",
			"func main() {",
			"  $0",
			"}"
		]
	},
	"Close": {
		"prefix": "cl",
		"body": [
			"close($0)"
		]
	},
	"Default": {
		"prefix": "def",
		"body": [
			"default:"
		]
	},
	"Context Done": {
		"prefix": "cd",
		"body": [
			"<-ctx.Done()"
		]
	},
	"Context Error": {
		"prefix": "ce",
		"body": [
			"ctx.Err()"
		]
	},
	"Context Argument": {
		"prefix": "con",
		"body": [
			"ctx context.Context"
		]
	},
	"Context Background": {
		"prefix": "cb",
		"body": [
			"context.Background()"
		]
	},
	"Context WithTimeout": {
		"prefix": "ct",
		"body": [
			"ctx, cancel := context.WithTimeout(ctx, $0)",
			"defer cancel()"
		]
	},
	"Context WithCancel": {
		"prefix": "cc",
		"body": [
			"ctx, cancel := context.WithCancel(ctx)",
			"defer cancel()"
		]
	},
	"NewContext": {
		"prefix": "nc",
		"body": [
			"// ${1:name}Key is a private context key.",
			"type ${1:name}Key struct{}",
			"",
			"// New$3Context returns a new context with ${1:name}.",
			"func New$3Context(ctx context.Context, v *${2:Type}) context.Context {",
			"  return context.WithValue(ctx, ${1:name}Key{}, v)",
			"}",
			"",
			"// $3FromContext returns ${1:name} from context.",
			"func $3FromContext(ctx context.Context) (*${2:Type}, bool) {",
			"  v, ok := ctx.Value(${1:name}Key{}).(*${2:Type})",
			"  return v, ok",
			"}"
		]
	},
	"Goroutine": {
		"prefix": "go",
		"body": [
			"go func(){",
			"  $0",
			"}()"
		]
	},
	"Empty Struct": {
		"prefix": "es",
		"body": [
			"struct{}{}"
		]
	},
	"Case": {
		"prefix": "ca",
		"body": [
			"case $1:"
		]
	},
	"Slice Remove": {
		"prefix": "sr",
		"body": [
			"${1:slice} = append(${1:slice}[:${2:index}], ${1:slice}[${2:index}+1:]...)"
		]
	},
	"sort": {
		"prefix": "sort",
		"body": [
			"sort.Slice(${1:s}, func(i, j int) bool {",
			"  a := $1[i]",
			"  b := $1[j]",
			"  return $0",
			"})"
		]
	},
	"int enum": {
		"prefix": "enum-int",
		"body": [
			"// $1 $2.",
			"type $1 int",
			"",
			"// $1s available.",
			"const (",
			"  $1$3 $1 = iota",
			"  $0",
			")"
		]
	},
	"string enum": {
		"prefix": "enum-string",
		"body": [
			"// $1 $2.",
			"type $1 string",
			"",
			"// $1s available.",
			"const (",
			"  $0",
			")"
		]
	},
	"defer": {
		"prefix": "d",
		"body": [
			"defer $0"
		]
	},
	"defer func": {
		"prefix": "de",
		"body": [
			"defer func() {",
			"  $0",
			"}()"
		]
	},
	"db": {
		"prefix": "db",
		"body": [
			"db *sqlx.DB"
		]
	},
	"if": {
		"prefix": "if",
		"body": [
			"if ${1:v}, ok := $2; ok {",
			"  $0",
			"}"
		]
	},
	"options": {
		"prefix": "options",
		"body": [
			"// Option function.",
			"type Option func(*$1) error",
			"",
			"// New $2 with the given options.",
			"func New(options ...Option) (*$1, error) {",
			"  var v $1",
			"  for _, o := range options {",
			"     if err := o(&v); err != nil {",
			"       return nil, err",
			"     }",
			"  }",
			"  return &v, nil",
			"}"
		]
	},
	"option": {
		"prefix": "o",
		"body": [
			"// With$1 $0.",
			"func With$1($2) Option {",
			"  return func($3) error {",
			"    $4",
			"    return nil",
			"  }",
			"}"
		]
	},
	"log error": {
		"prefix": "le",
		"body": [
			"logs.WithError(err).Error(\"$1\")"
		]
	},
	"log with fields": {
		"prefix": "lw",
		"body": [
			"logs.WithFields(log.Fields{",
			"  $0",
			"})"
		]
	},
	"delete": {
		"prefix": "del",
		"body": [
			"delete($1, \"$2\")"
		]
	},
	"Pretty Print": {
		"prefix": "pp",
		"body": [
			"pretty.Print($0)"
		]
	},
	"fmt.Fprintf": {
		"prefix": "pf",
		"body": [
			"fmt.Fprintf(w, \"${1:%s}\", $0)"
		]
	},
	"log.Fatalf": {
		"prefix": "fa",
		"body": [
			"log.Fatalf(\"error$1: %s\", ${0:err})"
		]
	},
	"Append": {
		"prefix": "a",
		"body": [
			"$1 = append($1, $0)"
		]
	},
	"js.Value": {
		"prefix": "j",
		"body": [
			"js.Value"
		]
	},
	"js.Func": {
		"prefix": "jf",
		"body": [
			"js.FuncOf(func(this js.Value, args []js.Value) interface{} {",
			"  $0",
			"  return nil",
			"})"
		]
	},
	"Build Tag": {
		"prefix": "build",
		"body": [
			"// +build ${0:js}"
		]
	},
	"To-do": {
		"prefix": "todo",
		"body": [
			"// TODO: $0"
		]
	},
	"Float64": {
		"prefix": "fl",
		"body": [
			"float64($0)"
		]
	},
	"Method": {
		"prefix": "m",
		"body": [
			"// $3 ${4:implementation}.",
			"func ($1 *$2) $3($5) $6 {",
			"  $0",
			"}"
		]
	},
	"Method Copy": {
		"prefix": "mm",
		"body": [
			"// $3 ${4:implementation}.",
			"func ($1 $2) $3($5) $6 {",
			"  $0",
			"}"
		]
	},
	"Make Chan": {
		"prefix": "mc",
		"body": [
			"make(chan ${0})"
		]
	},
	"Sprintf": {
		"prefix": "ss",
		"body": [
			"fmt.Sprintf(\"$1\", $0)"
		]
	},
	"If Error": {
		"prefix": "e",
		"body": [
			"if err != nil {",
			"  $0",
			"}"
		]
	},
	"errors.Is()": {
		"prefix": "is",
		"body": [
			"if errors.Is(err, ${1:io.ErrUnexpectedEOF}) {",
			"  $0",
			"}"
		]
	},
	"errors.As()": {
		"prefix": "as",
		"body": [
			"var e ${1:*os.PathError}",
			"if errors.As(err, &e) {",
			"  $0",
			"}"
		]
	},
	"Error Wrap": {
		"prefix": "ew",
		"body": [
			"fmt.Errorf(\"$1: %w\", err)"
		]
	},
	"If Error Oneliner": {
		"prefix": "ie",
		"body": [
			"if err := $1; err != nil {",
			"  $0",
			"}"
		]
	},
	"Return": {
		"prefix": "r",
		"body": [
			"return "
		]
	},
	"Return Error": {
		"prefix": "re",
		"body": [
			"return fmt.Errorf(\"$1: %w\", err)"
		]
	},
	"Return Nil": {
		"prefix": "n",
		"body": [
			"return nil"
		]
	},
	"Time Duration": {
		"prefix": "td",
		"body": [
			"time.Duration($0)"
		]
	},
	"Testing TB": {
		"prefix": "tb",
		"body": [
			"t testing.TB"
		]
	},
	"Time Now": {
		"prefix": "now",
		"body": [
			"time.Now()"
		]
	},
	"Time Start": {
		"prefix": "st",
		"body": [
			"start := time.Now()"
		]
	},
	"Time Since": {
		"prefix": "ts",
		"body": [
			"time.Since(${0:start})"
		]
	},
	"Assert Equal": {
		"prefix": "ae",
		"body": [
			"assert.Equal(t, ${1:expected}, ${2:actual})"
		]
	},
	"Assert Error Equal": {
		"prefix": "aee",
		"body": [
			"assert.EqualError(t, ${1:err}, `${0:msg}`)"
		]
	},
	"Assert No Error": {
		"prefix": "no",
		"body": [
			"assert.NoError(t, err${1:, \"$0\"})"
		]
	},
	"Map": {
		"prefix": "ma",
		"body": [
			"map[${1:string}]${0:value}"
		]
	},
	"HTTP Error": {
		"prefix": "he",
		"body": [
			"http.Error(w, \"$1\", http.Status$2)"
		]
	},
	"HTTP Handler": {
		"prefix": "ha",
		"body": [
			"w http.ResponseWriter, r *http.Request"
		]
	},
	"Hex Dump": {
		"prefix": "hd",
		"body": [
			"fmt.Printf(\"%s\\\\n\", hex.Dump($1))"
		]
	},
	"Tag": {
		"prefix": "tag",
		"body": [
			"`$1:\"$2\"`"
		]
	},
	"Bytes": {
		"prefix": "b",
		"body": [
			"[]byte($1)"
		]
	},
	"Buffer": {
		"prefix": "buf",
		"body": [
			"var buf bytes.Buffer"
		]
	},
	"strings.Builder": {
		"prefix": "sb",
		"body": [
			"var w strings.Builder"
		]
	},
	"Init": {
		"prefix": "init",
		"body": [
			"func init(){",
			"  $0",
			"}"
		]
	},
	"Function": {
		"prefix": "f",
		"body": [
			"// $1 $2.",
			"func $1($3) $4 {",
			"  $0",
			"}"
		]
	},
	"Function Anonymous": {
		"prefix": "ff",
		"body": [
			"func($1) $2 {",
			"  $0",
			"}"
		]
	},
	"Struct": {
		"prefix": "s",
		"body": [
			"// $1 $2.",
			"type $1 struct {",
			"  $0",
			"}"
		]
	},
	"Struct Field": {
		"prefix": "sf",
		"body": [
			"// $1 $3.",
			"${1:Name} ${2:string}"
		]
	},
	"Hex Dump Reader": {
		"prefix": "hdr",
		"body": [
			"{",
			"  b, err := ioutil.ReadAll($0)",
			"  if err != nil {",
			"    panic(err)",
			"  }",
			"",
			"  fmt.Printf(\"%s\\\\n\", hex.Dump(b))",
			"}"
		]
	},
	"Interface": {
		"prefix": "i",
		"body": [
			"// $1 $2.",
			"type $1 interface {",
			"  $0",
			"}"
		]
	},
	"Lock & Unlock": {
		"prefix": "lo",
		"body": [
			"$1.Lock()",
			"defer $1.Unlock()"
		]
	},
	"New Constructor": {
		"prefix": "ne",
		"body": [
			"// New $2.",
			"func New($3) *$1 {",
			"  return &$1{",
			"    $0",
			"  }",
			"}"
		]
	},
	"Inspect As JSON": {
		"prefix": "ij",
		"body": [
			"{",
			"  enc := json.NewEncoder(os.Stderr)",
			"  enc.SetIndent(\"\", \"  \")",
			"  enc.Encode($0)",
			"}"
		]
	},
	"For Range": {
		"prefix": "fr",
		"body": [
			"for _, ${1:v} := range ${2:value} {",
			"  $0",
			"}"
		]
	},
	"For Range Chan": {
		"prefix": "frr",
		"body": [
			"for ${1:v} := range ${2:value} {",
			"  $0",
			"}"
		]
	},
	"Config": {
		"prefix": "config",
		"body": [
			"// Config options.",
			"type Config struct {",
			"  $0",
			"}",
			"",
			"// $1 $2",
			"type $1 struct {",
			"  Config",
			"}",
			"",
			"// New $3 with the given config.",
			"func New(c Config) *$1 {",
			"  return &$1{",
			"    Config: c,",
			"  }",
			"}"
		]
	},
	"Context-Canceled Channel Send": {
		"prefix": "cs",
		"body": [
			"select {",
			"case $1 <- $0:",
			"case <-ctx.Done():",
			" return ctx.Err()",
			"}"
		]
	},
	"Non-blocking Channel Send": {
		"prefix": "nb",
		"body": [
			"select {",
			"case $1 <- $0:",
			"default:",
			"}"
		]
	},
	"Benchmark Function": {
		"prefix": "bench",
		"body": [
			"// Benchmark $2.",
			"func Benchmark$1(b *testing.B) {",
			"  for i := 0; i < b.N; i++ {",
			"    $0",
			"  }",
			"}"
		]
	},
	"Test Function": {
		"prefix": "t",
		"body": [
			"// Test $2.",
			"func Test$1(t *testing.T) {",
			"  $0",
			"}"
		]
	},
	"Test Case": {
		"prefix": "tr",
		"body": [
			"t.Run(\"$1\", func(t *testing.T){",
			"  $0",
			"})"
		]
	}
}