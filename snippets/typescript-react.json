{
	"destructuring of props": {
		"prefix": "dp",
		"body": [
			"const { ${1:name} } = this.props"
		]
	},
	"destructuring of state": {
		"prefix": "ds",
		"body": [
			"const { ${1:name} } = this.state"
		]
	},
	"reactClassCompoment": {
		"prefix": "rcc",
		"body": "import React, { Component } from 'react'\n\nclass ${TM_FILENAME_BASE} extends Component {\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ${1}",
		"description": "Creates a React component class"
	},
	"reactJustClassCompoment": {
		"prefix": "rcjc",
		"body": "class ${TM_FILENAME_BASE} extends Component {\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n",
		"description": "Creates a React component class"
	},
	"reactClassCompomentPropTypes": {
		"prefix": "rccp",
		"body": "import React, { Component, PropTypes } from 'react'\n\nclass ${TM_FILENAME_BASE} extends Component {\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n${1}.propTypes = {\n\n}\n\nexport default ${1}",
		"description": "Creates a React component class with PropTypes"
	},
	"reactClassCompomentWithMethods": {
		"prefix": "rcfc",
		"body": "import React, { Component, PropTypes } from 'react'\n\nclass ${TM_FILENAME_BASE} extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t}\n\n\tcomponentWillMount () {\n\n\t}\n\n\tcomponentDidMount () {\n\n\t}\n\n\tcomponentWillReceiveProps (nextProps) {\n\n\t}\n\n\tshouldComponentUpdate (nextProps, nextState) {\n\n\t}\n\n\tcomponentWillUpdate (nextProps, nextState) {\n\n\t}\n\n\tcomponentDidUpdate (prevProps, prevState) {\n\n\t}\n\n\tcomponentWillUnmount () {\n\n\t}\n\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n${1}.propTypes = {\n\n}\n\nexport default ${1}",
		"description": "Creates a React component class with PropTypes and all lifecycle methods"
	},
	"reactFunctionComponent": {
		"prefix": "rfc",
		"body": "import React from 'react'\n\nexport const ${TM_FILENAME_BASE}: React.FC<{}> = () => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}",
		"description": "Creates a React functional component without PropTypes"
	},
	"reactFunctionComponentWithEmotion": {
		"prefix": "rfce",
		"body": "import { css } from '@emotion/core'\nimport React from 'react'\n\nexport const ${TM_FILENAME_BASE}: React.FC<{}> = () => {\n\treturn (\n\t\t<div css={css``}>\n\t\t\t$0\n\t\t</div>\n\t)\n}",
		"description": "Creates a React functional component with emotion import"
	},
	"classConstructor": {
		"prefix": "con",
		"body": "constructor (props) {\n\tsuper(props)\n\t$0\n}\n",
		"description": "Adds a default constructor for the class that contains props as arguments"
	},
	"classConstructorContext": {
		"prefix": "conc",
		"body": "constructor (props, context) {\n\tsuper(props, context)\n\t$0\n}\n",
		"description": "Adds a default constructor for the class that contains props and context as arguments"
	},
	"componentWillMount": {
		"prefix": "cwm",
		"body": "\ncomponentWillMount () {\n\t$0\n}\n",
		"description": "Invoked once, both on the client and server, immediately before the initial rendering occurs"
	},
	"componentWillReceiveProps": {
		"prefix": "cwr",
		"body": "componentWillReceiveProps (nextProps) {\n\t$0\n}\n",
		"description": "Invoked when a component is receiving new props. This method is not called for the initial render."
	},
	"componentGetDerivedStateFromProps": {
		"prefix": "cgd",
		"body": "\nstatic getDerivedStateFromProps(nextProps, prevState) {\n\t$0\n}\n",
		"description": "Invoked after a component is instantiated as well as when it receives new props. It should return an object to update state, or null to indicate that the new props do not require any state updates."
	},
	"shouldComponentUpdate": {
		"prefix": "scu",
		"body": "shouldComponentUpdate (nextProps, nextState) {\n\t$0\n}\n",
		"description": "Invoked before rendering when new props or state are being received. "
	},
	"componentRender": {
		"prefix": "ren",
		"body": "render () {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}",
		"description": "When called, it should examine this.props and this.state and return a single child element."
	},
	"componentSetStateObject": {
		"prefix": "sst",
		"body": "this.setState($0)",
		"description": "Performs a shallow merge of nextState into current state"
	},
	"componentSetStateFunc": {
		"prefix": "ssf",
		"body": "this.setState((state, props) => { return { $0 }})\n",
		"description": "Performs a shallow merge of nextState into current state"
	},
	"componentProps": {
		"prefix": "tp",
		"body": "this.props.$0",
		"description": "Access component's props"
	},
	"componentState": {
		"prefix": "ts",
		"body": "this.state.$0",
		"description": "Access component's state"
	},
	"jsx element": {
		"prefix": "j",
		"body": "<${1:elementName}>\n\t$0\n</${1}>",
		"description": "an element"
	},
	"jsx element self closed": {
		"prefix": "jc",
		"body": "<${1:elementName} />",
		"description": "an element self closed"
	},
	"jsx elements map": {
		"prefix": "jm",
		"body": "{${1:array}.map((item) => <${2:elementName} key={item.id}>\n\t$0\n</${2}>)}",
		"description": "an element self closed"
	},
	"jsx elements map with return": {
		"prefix": "jmr",
		"body": "{${1:array}.map((item) => {\n\treturn <${2:elementName} key={item.id}>\n\t$0\n</${2}>\n})}",
		"description": "an element self closed"
	},
	"jsx element wrap selection": {
		"prefix": "jsx wrap selection with element",
		"body": "<${1:elementName}>\n\t{$TM_SELECTED_TEXT}\n</${1}>",
		"description": "an element"
	},
	"useState": {
		"prefix": "us",
		"body": "const [${1}, set${1/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}] = useState(${2:default${1/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}});",
		"description": "use state hook"
	},
	"useEffect": {
		"prefix": "ue",
		"body": [
			"useEffect(() => {",
			"\t$1",
			"}, [${3:dependencies}])$0"
		],
		"description": "React useEffect() hook"
	},
	"useEffect with cleanup": {
		"prefix": "uec",
		"body": [
			"useEffect(() => {",
			"\t$1",
			"\n\treturn () => {",
			"\t\t$2",
			"\t}",
			"}, [${3:dependencies}])$0"
		],
		"description": "React useEffect() hook with a cleanup function"
	},
	"createContext": {
		"prefix": "cc",
		"body": [
			"export const $1 = createContext<$2>(",
			"\t(null as any) as $2",
			")"
		],
		"description": "creates a react context"
	},
	"useContext": {
		"prefix": "uc",
		"body": [
			"const $1 = useContext($2)$0"
		],
		"description": "React useContext() hook"
	},
	"useRef": {
		"prefix": "ur",
		"body": [
			"const ${1:elName}El = useRef(null)$0"
		],
		"description": "React useContext() hook"
	},
	"useCallback": {
		"prefix": "ucb",
		"body": [
			"const ${1:memoizedCallback} = useCallback(",
			"\t() => {",
			"\t\t${2:doSomething}(${3:a}, ${4:b})",
			"\t},",
			"\t[${5:a}, ${6:b}],",
			")$0"
		],
		"description": "React useCallback() hook"
	},
	"useMemo": {
		"prefix": "ume",
		"body": [
			"const ${1:memoizedValue} = useMemo(() => ${2:computeExpensiveValue}(${3:a}, ${4:b}), [${5:a}, ${6:b}])$0"
		],
		"description": "React useMemo() hook"
	},
	"Import React": {
		"prefix": "imr",
		"body": [
			"import * as React from 'react';\n"
		],
		"description": "Import React"
	},
	"Import React and Component": {
		"prefix": "imrc",
		"body": [
			"import * as React from 'react';",
			"import { Component } from 'react';\n"
		],
		"description": "Import React, { Component }"
	},
	"Import ReactDOM": {
		"prefix": "imrd",
		"body": [
			"import ReactDOM from 'react-dom';"
		],
		"description": "Import ReactDOM"
	},
	"Import React, { useState }": {
		"prefix": "imrs",
		"body": [
			"import * as React from 'react';",
			"import { useState } from 'react';\n"
		],
		"description": "Import React, { useState }"
	},
	"Import React, { useState, useEffect }": {
		"prefix": "imrse",
		"body": [
			"import * as React from 'react';",
			"import { useState, useEffect } from 'react';\n"
		],
		"description": "Import React, { useState, useEffect }"
	},
	"Import Pure Component": {
		"prefix": "impc",
		"body": [
			"import React, { PureComponent } from 'react';\n"
		],
		"description": "Import React, { PureComponent }"
	},
	"Class Component": {
		"prefix": "cc",
		"body": [
			"interface $1Props {",
			"\t$2",
			"}",
			" ",
			"interface $1State {",
			"\t$3",
			"}",
			" ",
			"class $1 extends React.Component<$1Props, $1State> {",
			"\tstate = { $4: $5 }",
			"\trender() { ",
			"\t\treturn ( $0 );",
			"\t}",
			"}",
			" ",
			"export default $1;"
		],
		"description": "Class Component"
	},
	"Class Pure Component": {
		"prefix": "cpc",
		"body": [
			"export interface $1Props {",
			"\t$2",
			"}",
			" ",
			"export interface $1State {",
			"\t$3",
			"}",
			" ",
			"class $1 extends React.PureComponent<$1Props, $1State> {",
			"\tstate = { $4: $5 }",
			"\trender() { ",
			"\t\treturn ( $0 );",
			"\t}",
			"}",
			" ",
			"export default $1;"
		],
		"description": "Class Pure Component"
	},
	"Class Component Constructor": {
		"prefix": "ccc",
		"body": [
			"interface $1Props {",
			"\t$2",
			"}",
			" ",
			"interface $1State {",
			"\t$3",
			"}",
			" ",
			"class $1 extends React.Component<$1Props, $1State> {",
			"\tconstructor(props: $1Props) {",
			"\t\tsuper(props);",
			"\t\tthis.state = { $4: $5 };",
			"\t}",
			"\trender() { ",
			"\t\treturn ( $0 );",
			"\t}",
			"}",
			" ",
			"export default $1;"
		],
		"description": "Class Component with Constructor"
	},
	"Function Component": {
		"prefix": "fc",
		"body": [
			"interface $1Props {",
			"\t$2",
			"}",
			" ",
			"const $1: FunctionComponent<$1Props> = ($3) => {",
			"\treturn ( $0 );",
			"}",
			" ",
			"export default $1;"
		],
		"description": "Function Component"
	},
	"Function Syntax Component": {
		"prefix": "ffc",
		"body": [
			"function $1($2) {",
			"\treturn ( $0 );",
			"}",
			"",
			"export default $1;"
		],
		"description": "Function Syntax Component"
	},
	"componentDidMount": {
		"prefix": "cdm",
		"body": [
			"componentDidMount() {",
			"\t$0",
			"}"
		],
		"description": "componentDidMount"
	},
	"getDerivedStateFromProps": {
		"prefix": "gds",
		"body": [
			"static getDerivedStateFromProps(nextProps: $1Props, prevState: $1State) {",
			"\t$0",
			"}"
		],
		"description": "getDerivedStateFromProps"
	},
	"componentWillUpdate": {
		"prefix": "cwu",
		"body": [
			"//WARNING! To be deprecated in React v17. Use componentDidUpdate instead.",
			"componentWillUpdate(nextProps: $1Props, nextState: $1State) {",
			"\t$0",
			"}"
		],
		"description": "componentWillUpdate"
	},
	"componentDidUpdate": {
		"prefix": "cdu",
		"body": [
			"componentDidUpdate(prevProps: $1Props, prevState: $1State) {",
			"\t$0",
			"}"
		],
		"description": "componentDidUpdate"
	},
	"componentWillUnmount": {
		"prefix": "cwun",
		"body": [
			"componentWillUnmount() {",
			"\t$0",
			"}"
		],
		"description": "componentWillUnmount"
	},
	"componentDidCatch": {
		"prefix": "cdc",
		"body": [
			"componentDidCatch(error, info) {",
			"\t$0",
			"}"
		],
		"description": "componentDidCatch"
	},
	"getSnapshotBeforeUpdate": {
		"prefix": "gsbu",
		"body": [
			"getSnapshotBeforeUpdate(prevProps: $1Props, prevState: $1State) {",
			"\t$0",
			"}"
		],
		"description": "getSnapshotBeforeUpdate"
	},
	"setState": {
		"prefix": "ss",
		"body": [
			"this.setState({ $1: $2 });"
		],
		"description": "setState"
	},
	"Functional setState": {
		"prefix": "ssf",
		"body": [
			"this.setState(prevState => {",
			"\treturn { $1: prevState.$1 };",
			"});"
		],
		"description": "Functional setState"
	},
	"Declare a new state variable using State Hook": {
		"prefix": "usf",
		"body": [
			"const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2);"
		],
		"description": "Declare a new state Variable using the State Hook. Hit Tab to apply CamelCase to function"
	},
	"render": {
		"prefix": "ren",
		"body": [
			"render() {",
			"\treturn (",
			"\t\t $0",
			"\t);",
			"}"
		],
		"description": "render"
	},
	"Render Prop": {
		"prefix": "rprop",
		"body": [
			"interface $1Props {",
			"\trender: (state: $1State) => JSX.Element",
			"}",
			" ",
			"interface $1State {",
			"\t$2",
			"}",
			" ",
			"class $1 extends React.Component<$1Props, $1State> {",
			"\tstate = { $3: $4 }",
			"\trender() { ",
			"\t\treturn this.props.render(this.state);",
			"\t}",
			"}",
			" ",
			"export default $1;"
		],
		"description": "Render Prop"
	}
}