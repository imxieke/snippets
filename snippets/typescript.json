{
	"Constructor": {
		"prefix": "ctor",
		"body": [
			"/**",
			" *",
			" */",
			"constructor() {",
			"\tsuper();",
			"\t$0",
			"}"
		],
		"description": "Constructor"
	},
	"Class Definition": {
		"prefix": "class",
		"body": [
			"class ${1:name} {",
			"\tconstructor(${2:parameters}) {",
			"\t\t$0",
			"\t}",
			"}"
		],
		"description": "Class Definition"
	},
	"Public Method Definition": {
		"prefix": "public method",
		"body": [
			"/**",
			" * ${1:name}",
			" */",
			"public ${1:name}() {",
			"\t$0",
			"}"
		],
		"description": "Public Method Definition"
	},
	"Private Method Definition": {
		"prefix": "private method",
		"body": [
			"private ${1:name}() {",
			"\t$0",
			"}"
		],
		"description": "Private Method Definition"
	},
	"Import Statement": {
		"prefix": "import",
		"body": [
			"import { $0 } from \"${1:module}\";"
		],
		"description": "Import external module"
	},
	"Property getter": {
		"prefix": "get",
		"body": [
			"",
			"public get ${1:value}() : ${2:string} {",
			"\t${3:return $0}",
			"}",
			""
		],
		"description": "Property getter"
	},
	"Log to the console": {
		"prefix": "log",
		"body": [
			"console.log($1);",
			"$0"
		],
		"description": "Log to the console"
	},
	"Log warning to console": {
		"prefix": "warn",
		"body": [
			"console.warn($1);",
			"$0"
		],
		"description": "Log warning to the console"
	},
	"Log error to console": {
		"prefix": "error",
		"body": [
			"console.error($1);",
			"$0"
		],
		"description": "Log error to the console"
	},
	"Define a full property": {
		"prefix": "prop",
		"body": [
			"",
			"private _${1:value} : ${2:string};",
			"public get ${1:value}() : ${2:string} {",
			"\treturn this._${1:value};",
			"}",
			"public set ${1:value}(v : ${2:string}) {",
			"\tthis._${1:value} = v;",
			"}",
			""
		],
		"description": "Define a full property"
	},
	"Triple-slash reference": {
		"prefix": "ref",
		"body": [
			"/// <reference path=\"$1\" />",
			"$0"
		],
		"description": "Triple-slash reference"
	},
	"Property setter": {
		"prefix": "set",
		"body": [
			"",
			"public set ${1:value}(v : ${2:string}) {",
			"\tthis.$3 = v;",
			"}",
			""
		],
		"description": "Property setter"
	},
	"Throw Exception": {
		"prefix": "throw",
		"body": [
			"throw new Error(\"$1\");",
			"$0"
		],
		"description": "Throw Exception"
	},
	"For Loop": {
		"prefix": "for",
		"body": [
			"for (let ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {",
			"\tconst ${3:element} = ${2:array}[${1:index}];",
			"\t$TM_SELECTED_TEXT$0",
			"}"
		],
		"description": "For Loop"
	},
	"For-Each Loop using =>": {
		"prefix": "foreach =>",
		"body": [
			"${1:array}.forEach(${2:element} => {",
			"\t$TM_SELECTED_TEXT$0",
			"});"
		],
		"description": "For-Each Loop using =>"
	},
	"For-In Loop": {
		"prefix": "forin",
		"body": [
			"for (const ${1:key} in ${2:object}) {",
			"\tif (Object.prototype.hasOwnProperty.call(${2:object}, ${1:key})) {",
			"\t\tconst ${3:element} = ${2:object}[${1:key}];",
			"\t\t$TM_SELECTED_TEXT$0",
			"\t}",
			"}"
		],
		"description": "For-In Loop"
	},
	"For-Of Loop": {
		"prefix": "forof",
		"body": [
			"for (const ${1:iterator} of ${2:object}) {",
			"\t$TM_SELECTED_TEXT$0",
			"}"
		],
		"description": "For-Of Loop"
	},
	"For-Await-Of Loop": {
		"prefix": "forawaitof",
		"body": [
			"for await (const ${1:iterator} of ${2:object}) {",
			"\t$TM_SELECTED_TEXT$0",
			"}"
		],
		"description": "For-Await-Of Loop"
	},
	"Function Statement": {
		"prefix": "function",
		"body": [
			"function ${1:name}(${2:params}:${3:type}) {",
			"\t$TM_SELECTED_TEXT$0",
			"}"
		],
		"description": "Function Statement"
	},
	"If Statement": {
		"prefix": "if",
		"body": [
			"if (${1:condition}) {",
			"\t$TM_SELECTED_TEXT$0",
			"}"
		],
		"description": "If Statement"
	},
	"If-Else Statement": {
		"prefix": "ifelse",
		"body": [
			"if (${1:condition}) {",
			"\t$TM_SELECTED_TEXT$0",
			"} else {",
			"\t",
			"}"
		],
		"description": "If-Else Statement"
	},
	"New Statement": {
		"prefix": "new",
		"body": [
			"const ${1:name} = new ${2:type}(${3:arguments});$0"
		],
		"description": "New Statement"
	},
	"Switch Statement": {
		"prefix": "switch",
		"body": [
			"switch (${1:key}) {",
			"\tcase ${2:value}:",
			"\t\t$0",
			"\t\tbreak;",
			"",
			"\tdefault:",
			"\t\tbreak;",
			"}"
		],
		"description": "Switch Statement"
	},
	"While Statement": {
		"prefix": "while",
		"body": [
			"while (${1:condition}) {",
			"\t$TM_SELECTED_TEXT$0",
			"}"
		],
		"description": "While Statement"
	},
	"Do-While Statement": {
		"prefix": "dowhile",
		"body": [
			"do {",
			"\t$TM_SELECTED_TEXT$0",
			"} while (${1:condition});"
		],
		"description": "Do-While Statement"
	},
	"Try-Catch Statement": {
		"prefix": "trycatch",
		"body": [
			"try {",
			"\t$TM_SELECTED_TEXT$0",
			"} catch (${1:error}) {",
			"\t",
			"}"
		],
		"description": "Try-Catch Statement"
	},
	"Set Timeout Function": {
		"prefix": "settimeout",
		"body": [
			"setTimeout(() => {",
			"\t$TM_SELECTED_TEXT$0",
			"}, ${1:timeout});"
		],
		"description": "Set Timeout Function"
	},
	"Region Start": {
		"prefix": "#region",
		"body": [
			"//#region $0"
		],
		"description": "Folding Region Start"
	},
	"Region End": {
		"prefix": "#endregion",
		"body": [
			"//#endregion"
		],
		"description": "Folding Region End"
	},
	"new Promise": {
		"prefix": "newpromise",
		"body": [
			"new Promise<${1:void}>((resolve, reject) => {",
			"\t$TM_SELECTED_TEXT$0",
			"})"
		],
		"description": "Create a new Promise"
	},
	"Async Function Statement": {
		"prefix": "async function",
		"body": [
			"async function ${1:name}(${2:params}:${3:type}) {",
			"\t$TM_SELECTED_TEXT$0",
			"}"
		],
		"description": "Async Function Statement"
	},
	"Async Function Expression": {
		"prefix": "async arrow function",
		"body": [
			"async (${1:params}:${2:type}) => {",
			"\t$TM_SELECTED_TEXT$0",
			"}"
		],
		"description": "Async Function Expression"
	},
	"create new service file": {
		"prefix": "us-service",
		"body": [
			"import { Injectable } from '@angular/core';",
			"import { ComboItem } from 'app/models';",
			"import { Observable } from 'rxjs/Observable';",
			"import { UtilityService } from 'app/core/utility.service';",
			"import { map } from 'rxjs/operators';",
			"",
			"@Injectable({",
			"  providedIn: 'root'",
			"})",
			"export class ${1:serviceName}Service {",
			"",
			"  constructor(private utilityService: UtilityService) {}",
			"",
			"}"
		],
		"description": "create new service file"
	},
	"get API Data": {
		"prefix": "us-api-get",
		"body": [
			"${1:methodName}(id: number): Observable<${2:modelName}> {",
			"    return this.utilityService.data",
			"      .get('${3:apiUrl}', id)",
			"      .pipe(map((data: ${2:modelName}) => data));",
			"}"
		],
		"description": "get API Data"
	},
	"post API Data": {
		"prefix": "us-api-post",
		"body": [
			"${1:methodName}<T>(obj: ${2:modelName}): Observable<T> {",
			"    return this.utilityService.data.post('${4:apiUrl}', obj);",
			"}"
		],
		"description": "post API Data"
	},
	"save API Data": {
		"prefix": "us-api-save",
		"body": [
			"${1:methodName}<T>(obj: ${2:modelName}): Observable<T> {",
			"    if (obj.${3:id} != null) {",
			"      return this.utilityService.data.put('${4:apiUrl}', obj);",
			"    } else {",
			"      return this.utilityService.data.post('${4:apiUrl}', obj);",
			"    }",
			"}"
		],
		"description": "save API Data"
	},
	"delete API Data": {
		"prefix": "us-api-delete",
		"body": [
			"${1:methodName}<T>(id: number): Observable<T> {",
			"    return this.utilityService.data.delete('${2:apiUrl}/' + id);",
			"}"
		],
		"description": "delete API Data"
	},
	"get Data From Service": {
		"prefix": "us-getData",
		"body": [
			"${1:functionName}(): void {",
			"    this.subscription.add(",
			"      this.${2:serviceName}",
			"        .${3:methodName}()",
			"        .subscribe(data => {",
			"          this.${4:dataSourceName} = data;",
			"        })",
			"    );",
			"  }"
		],
		"description": "get Data From Service"
	},
	"setTimeOut": {
		"prefix": "us-timeout",
		"body": [
			"setTimeout(() => {",
			"    ${2:}",
			"  }, ${1:miliSecond});"
		],
		"description": "setTimeOut"
	},
		"Angular Component": {
			"prefix": "a-component",
			"description": "Angular component",
			"body": [
				"import { Component, OnInit } from '@angular/core';",
				"",
				"@Component({",
				"\tselector: '${1:selector-name}',",
				"\ttemplateUrl: '${2:name}.component.html'",
				"})",
				"",
				"export class ${3:Name}Component implements OnInit {",
				"\tconstructor() { }",
				"",
				"\tngOnInit() { }$0",
				"}"
			]
		},
		"Angular Component with Inline Template": {
			"prefix": "a-component-inline",
			"description": "Angular component with an inline template",
			"body": [
				"import { Component, OnInit } from '@angular/core';",
				"",
				"@Component({",
				"\tselector: '${1:selector-name}',",
				"\ttemplate: `$0`",
				"})",
				"",
				"export class ${2:Name}Component implements OnInit {",
				"\tconstructor() { }",
				"",
				"\tngOnInit() { }",
				"}"
			]
		},
		"Angular Pipe": {
			"prefix": "a-pipe",
			"description": "Angular pipe",
			"body": [
				"import { Pipe, PipeTransform } from '@angular/core';",
				"",
				"@Pipe({",
				"\tname: '${1:selector-name}'",
				"})",
				"",
				"export class ${2:Name}Pipe implements PipeTransform {",
				"\ttransform(value: any, ...args: any[]): any {",
				"\t\t$0",
				"\t}",
				"}"
			]
		},
		"Angular Service": {
			"prefix": "a-service",
			"description": "Angular Service with Injectable ProvidedIn Root",
			"body": [
				"import { Injectable } from '@angular/core';",
				"",
				"@Injectable({providedIn: ${1:'root'}})",
				"export class ${2:ServiceName}Service {",
				"\tconstructor() { }",
				"\t$0",
				"}"
			]
		},
		"Angular Default Route Path": {
			"prefix": "a-route-path-default",
			"description": "Angular default route path",
			"body": [
				"{ path: '', pathMatch: 'full', redirectTo: '${1:path}' },$0"
			]
		},
		"Angular Route Path with Children": {
			"prefix": "a-route-path-with-children",
			"description": "Angular route path with children",
			"body": [
				"{",
				"\tpath: '${1:path}', ",
				"\tcomponent: ${2:Component},",
				"\tchildren: [",
				"\t\t{ path: '${3:childpath}', component: ${4:ChildComponent} }",
				"\t]",
				"},$0"
			]
		},
		"Angular 404 Route Path": {
			"prefix": "a-route-path-404",
			"description": "Angular 404 route path",
			"body": [
				"{ path: '**', component: ${1:PathNotFoundComponent} },$0"
			]
		},
		"Angular Eager Route Path": {
			"prefix": "a-route-path-eager",
			"description": "Angular eager route path",
			"body": [
				"{ path: '${1:path}', component: ${2:Name}Component },$0"
			]
		},
		"Angular Lazy Route Path": {
			"prefix": "a-route-path-lazy",
			"description": "Angular lazy route path",
			"body": [
				"{",
				"\tpath: '${1:path}', ",
				"\tloadChildren: () => import('${2:lazy-path}').then(m => m.${3:lazy-module})",
				"},$0"
			]
		},
		"Routing Params - Subscribe": {
			"prefix": "a-route-params-subscribe",
			"description": "Angular - subscribe to routing parameters",
			"body": [
				"this.route.paramMap",
				"\t.pipe(map(params => params.get('id')), tap(id => (this.id = +id)))",
				"\t.subscribe(id => {$1});",
				"$0"
			]
		},
		"HttpClient.get": {
			"prefix": "a-httpclient-get",
			"description": "Angular HttpClient.get",
			"body": [
				"return this.httpClient.get('${1:url}');$0"
			]
		},
		"Angular HttpClient Service": {
			"prefix": "a-service-httpclient",
			"description": "Angular service with HttpClient",
			"body": [
				"import { Injectable } from '@angular/core';",
				"import { HttpClient } from '@angular/common/http';",
				"",
				"@Injectable({providedIn: ${1:'root'}})",
				"export class ${2:ServiceName}Service {",
				"\tconstructor(private httpClient: HttpClient) { }",
				"\t$0",
				"}"
			]
		},
		"Angular HttpInterceptor for Logging": {
			"prefix": "a-http-interceptor-logging",
			"description": "Angular HttpInterceptor for Logging HttpClient",
			"body": [
				"import { HttpInterceptor, HttpHandler, HttpRequest, HttpEvent, HttpResponse } from '@angular/common/http';",
				"import { Observable } from 'rxjs';",
				"import { tap } from 'rxjs/operators';",
				"",
				"@Injectable()",
				"export class LogInterceptor implements HttpInterceptor {",
				"\tconstructor() {}",
				"",
				"\tintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {",
				"\t\tconst started = Date.now();",
				"\t\treturn next.handle(req).pipe(",
				"\t\t\ttap(event => {",
				"\t\t\t\tif (event instanceof HttpResponse) {",
				"\t\t\t\t\tconst elapsed = Date.now() - started;",
				"\t\t\t\t\tconsole.log(`Request for \\${req.urlWithParams} took \\${elapsed} ms.`);",
				"\t\t\t\t}",
				"\t\t\t})",
				"\t\t);",
				"\t}",
				"}"
			]
		},
		"Angular HttpInterceptor for Headers": {
			"prefix": "a-http-interceptor-headers",
			"description": "Angular HttpInterceptor for headers HttpClient",
			"body": [
				"import { Injectable } from '@angular/core';",
				"import { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';",
				"import { Observable } from 'rxjs';",
				"",
				"@Injectable()",
				"export class HeaderInterceptor implements HttpInterceptor {",
				"\tconstructor() {}",
				"",
				"\tintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {",
				"\t\tconst headers = req.headers",
				"\t\t\t.set('Content-Type', 'application/json');",
				"\t\tconst authReq = req.clone({ headers });",
				"\t\treturn next.handle(authReq);",
				"\t}",
				"}"
			]
		},
		"Angular HttpInterceptor - Empty": {
			"prefix": "a-http-interceptor",
			"description": "Empty Angular HttpInterceptor for HttpClient",
			"body": [
				"import { Injectable } from '@angular/core';",
				"import { HttpInterceptor, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';",
				"import { Observable } from 'rxjs';",
				"",
				"@Injectable()",
				"export class ${2:Your}Interceptor implements HttpInterceptor {",
				"\tintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {",
				"\t\treturn next.handle(req);",
				"\t}",
				"}"
			]
		},
		"Output Event": {
			"prefix": "a-output-event",
			"body": [
				"@Output() ${1:eventName} = new EventEmitter<${2:eventType}>();"
			],
			"description": "Angular @Output event and emitter"
		},
		"Subscribe": {
			"prefix": "a-subscribe",
			"description": "Angular observable subscribe",
			"body": [
				"this.${1:service}.${2:function}",
				"\t.subscribe(${3:arg} => this.${4:property} = ${3:arg});",
				"$0"
			]
		},
		"Angular Root Component": {
			"prefix": "a-component-root",
			"description": "Angular App root component",
			"body": [
				"import { Component } from '@angular/core';",
				"",
				"@Component({",
				"\tselector: '${1:prefix-app}',",
				"\ttemplate: `",
				"\t\t<router-outlet></router-outlet>",
				"\t\t`",
				"})",
				"export class ${2:App}Component { }",
				"$0"
			]
		},
		"Angular Root Module": {
			"prefix": "a-module-root",
			"description": "Angular Root Module",
			"body": [
				"import { NgModule } from '@angular/core';",
				"import { BrowserModule  } from '@angular/platform-browser';",
				"import { HttpModule } from '@angular/http';",
				"",
				"import { ${1:App}Component } from './${1:app}.component';",
				"",
				"@NgModule({",
				"\timports: [",
				"\t\tBrowserModule,",
				"\t\tHttpModule,",
				"\t],",
				"\tdeclarations: [${1:App}Component],",
				"\tbootstrap: [${1:App}Component],",
				"})",
				"export class ${1:App}Module { }",
				"$0"
			]
		},
		"Route definitions": {
			"prefix": "a-routes",
			"description": "Route definitions",
			"body": [
				"import { Routes } from '@angular/router';",
				"",
				"export const routes: Routes = [${0}]"
			]
		},
		"Angular Module": {
			"prefix": "a-module",
			"description": "Angular Module",
			"body": [
				"import { NgModule } from '@angular/core';",
				"",
				"import { ${1:Name}Component } from './${2:name}.component';",
				"",
				"@NgModule({",
				"\timports: [],",
				"\texports: [],",
				"\tdeclarations: [${1:Name}Component],",
				"\tproviders: [],",
				"})",
				"export class ${1:Name}Module { }",
				"$0"
			]
		},
		"Angular Directive": {
			"prefix": "a-directive",
			"description": "Angular directive",
			"body": [
				"import { Directive } from '@angular/core';",
				"",
				"@Directive({ selector: '[${1:selector-name}]' })",
				"export class ${2:Name}Directive {",
				"\tconstructor() { }",
				"}"
			]
		},
		"Angular CanActivate Guard": {
			"prefix": "a-guard-can-activate",
			"description": "Angular CanActivate guard",
			"body": [
				"import { Injectable } from '@angular/core';",
				"import { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';",
				"",
				"@Injectable({providedIn: ${1:'root'}})",
				"export class ${2:Name}Guard implements CanActivate {",
				"\tconstructor() { }",
				"",
				"\tcanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {",
				"\t\treturn true;$0",
				"\t}",
				"}"
			]
		},
		"Angular CanActivateChild Guard": {
			"prefix": "a-guard-can-activate-child",
			"description": "Angular CanActivateChild guard",
			"body": [
				"import { Injectable } from '@angular/core';",
				"import { ActivatedRouteSnapshot, CanActivateChild, RouterStateSnapshot } from '@angular/router';",
				"",
				"@Injectable({providedIn: ${1:'root'}})",
				"export class ${2:Name}Guard implements CanActivateChild {",
				"\tconstructor() { }",
				"",
				"\tcanActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {",
				"\t\treturn true;$0",
				"\t}",
				"}"
			]
		},
		"Angular CanLoad Guard": {
			"prefix": "a-guard-can-load",
			"description": "Angular CanLoad guard",
			"body": [
				"import { Injectable } from '@angular/core';",
				"import { CanLoad, Route } from '@angular/router';",
				"",
				"@Injectable({providedIn: ${1:'root'}})",
				"export class ${2:Name}Guard implements CanLoad {",
				"\tconstructor() { }",
				"",
				"\tcanLoad(route: Route) {",
				"\t\treturn true;$0",
				"\t}",
				"}"
			]
		},
		"Angular CanDeactivate Guard": {
			"prefix": "a-guard-can-deactivate",
			"description": "Angular CanDeactivate guard",
			"body": [
				"import { Injectable } from '@angular/core';",
				"import { ActivatedRouteSnapshot, CanDeactivate, RouterStateSnapshot } from '@angular/router';",
				"import { Observable } from 'rxjs';",
				"",
				"import { ${2:ComponentName}Component } from './${3:filename}.component';",
				"",
				"// Consider using this interface for all CanDeactivate guards,",
				"// and have your components implement this interface, too.",
				"//",
				"//   e.g. export class CanDeactivateGuard implements CanDeactivate<CanComponentDeactivate> {",
				"//",
				"// export interface CanComponentDeactivate {",
				"// canDeactivate: () => any;",
				"// }",
				"",
				"@Injectable({providedIn: ${4:'root'}})",
				"export class ${1:Name}Guard implements CanDeactivate<${2:ComponentName}Component> {",
				"\tcanDeactivate(",
				"\t\tcomponent: ${2:ComponentName}Component,",
				"\t\tcurrentRoute: ActivatedRouteSnapshot, ",
				"\t\tcurrentState: RouterStateSnapshot",
				"\t): Observable<boolean>|Promise<boolean>|boolean {",
				"\t\treturn false;$0",
				"\t}",
				"}"
			]
		},
		"Angular Opt-In Preload Strategy": {
			"prefix": "a-preload-opt-in-strategy",
			"description": "Angular opt-in preload strategy",
			"body": [
				"import { PreloadingStrategy, Route } from '@angular/router';",
				"import { Observable, of } from 'rxjs';",
				"",
				"export class PreloadSelectedModulesList implements PreloadingStrategy {",
				"\tpreload(route: Route, load: Function): Observable<any> {",
				"\t\treturn route.data && route.data['${1:preload}'] ? load() : of(null);",
				"\t}",
				"}",
				"$0"
			]
		},
		"Angular Network-Aware Preload Strategy": {
			"prefix": "a-preload-network-strategy",
			"description": "Angular network aware preload strategy",
			"body": [
				"import { Injectable } from '@angular/core';",
				"import { PreloadingStrategy, Route } from '@angular/router';",
				"import { Observable, EMPTY } from 'rxjs';",
				"",
				"// avoid typing issues for now",
				"export declare var navigator;",
				"",
				"@Injectable({ providedIn: 'root' })",
				"export class NetworkAwarePreloadStrategy implements PreloadingStrategy {",
				"\tpreload(route: Route, load: () => Observable<any>): Observable<any> {",
				"\t\treturn this.hasGoodConnection() ? load() : EMPTY;",
				"\t}",
				"",
				"\thasGoodConnection(): boolean {",
				"\t\tconst conn = navigator.connection;",
				"\t\tif (conn) {",
				"\t\t\tif (conn.saveData) {",
				"\t\t\t\treturn false; // save data mode is enabled, so dont preload",
				"\t\t\t}",
				"\t\t\tconst avoidTheseConnections = ['slow-2g', '2g' /* , '3g', '4g' */];",
				"\t\t\tconst effectiveType = conn.effectiveType || '';",
				"\t\t\tif (avoidTheseConnections.includes(effectiveType)) {",
				"\t\t\t\treturn false;",
				"\t\t\t}",
				"\t\t}",
				"\t\treturn true;",
				"\t}",
				"}"
			]
		},
		"Angular Router Events": {
			"prefix": "a-router-events",
			"description": "Angular Router Events",
			"body": [
				"checkEvents() {",
				"\tthis.router.events.subscribe(event => {",
				"\t\tswitch (true) {",
				"\t\t\tcase event instanceof ${1:eventName}:",
				"\t\t\t\t$0",
				"\t\t\t\tbreak;",
				"",
				"\t\t\tdefault:",
				"\t\t\t\tbreak;",
				"\t\t}",
				"\t});",
				"}"
			]
		},
		"Angular Module SkipSelf Constructor": {
			"prefix": "a-ctor-skip-self",
			"description": "Angular Module SkipSelf constructor",
			"body": [
				"constructor( @Optional() @SkipSelf() parentModule: ${1:ModuleName} {",
				"\tif (parentModule) {",
				"\t\tconst msg = `${1:ModuleName} has already been loaded. ",
				"\t\t\tImport ${1:ModuleName} once, only, in the root AppModule.`;",
				"\t\tthrow new Error(msg);",
				"\t}",
				"}"
			]
		},
		"RxJs Import": {
			"prefix": "a-rxjs-import",
			"description": "RxJs import",
			"body": [
				"import { ${1:Observable} } from 'rxjs';",
				"$0"
			]
		},
		"RxJs Operator Import": {
			"prefix": "a-rxjs-operator-import",
			"description": "RxJs import",
			"body": [
				"import { ${1:map} } from 'rxjs/operators';",
				"$0"
			]
		},
		"Angular Resolver": {
			"prefix": "a-resolver",
			"description": "Angular Resolver",
			"body": [
				"import { Injectable } from '@angular/core';",
				"import { Resolve, ActivatedRouteSnapshot } from '@angular/router';",
				"import { Observable } from 'rxjs';",
				"",
				"@Injectable({ providedIn: ${1:'root'} })",
				"export class ${2:YourResolver} implements Resolve<${3:ObjectToResolve}> {",
				"\tresolve(route: ActivatedRouteSnapshot): Observable<${3:ObjectToResolve}> | Promise<${3:ObjectToResolve}> | ${3:ObjectToResolve} {",
				"\t\treturn ${0};",
				"\t}",
				"}"
			]
		},
		"NgRx Store Module": {
			"prefix": "a-ngrx-store-module",
			"description": "NgRx Store Module",
			"body": [
				"import { NgModule } from '@angular/core';",
				"import { EffectsModule } from '@ngrx/effects';",
				"import { StoreModule } from '@ngrx/store';",
				"import { StoreDevtoolsModule } from '@ngrx/store-devtools';",
				"import { environment } from '../../environments/environment';",
				"",
				"@NgModule({",
				"  imports: [",
				"    StoreModule.forRoot({}),",
				"    EffectsModule.forRoot([]),",
				"    environment.production ? [] : StoreDevtoolsModule.instrument()",
				"  ]",
				"})",
				"export class $1StoreModule {}"
			]
		},
		"NgRx Create Action": {
			"prefix": "a-ngrx-create-action",
			"description": "Creates an NgRx Action",
			"body": [
				"export const ${1:action} = createAction('[${2:Source}] ${3:Event}');"
			]
		},
		"NgRx Create Action w/ Props": {
			"prefix": "a-ngrx-create-action-props",
			"description": "Creates an NgRx Action with Props",
			"body": [
				"export const ${1:action} = createAction('[${2:Source}] ${3:Event}', props<{${4:key}: ${5:type}}>());"
			]
		},
		"NgRx Create Reducer": {
			"prefix": "a-ngrx-create-reducer",
			"description": "Creates an NgRx Reducer",
			"body": [
				"const ${1:feature}Reducer = createReducer(",
				"\tinitialState,",
				"\ton($1Actions.action, state => ({ ...state, ${2:prop}: ${3:updatedValue} })),",
				");",
				"",
				"export function reducer(state: State | undefined, action: Action) {",
				"\treturn $1Reducer(state, action);",
				"}"
			]
		},
		"NgRx Create Effect": {
			"prefix": "a-ngrx-create-effect",
			"description": "Creates an NgRx Effect",
			"body": [
				"${1:effectName}$ = createEffect(() => {",
				"\treturn this.actions$.pipe(",
				"\t\t\tofType(${2:action}),",
				"\t\t\t/** An EMPTY observable only emits completion. Replace with your own observable stream */",
				"\t\t\t${3:operator}(() => ${4:EMPTY}));",
				"});"
			]
		},
		"NgRx Create Effect for API Call": {
			"prefix": "a-ngrx-create-effect-api",
			"description": "Creates an NgRx Effect Scaffolded for API Call",
			"body": [
				"${1:effectName}$ = createEffect(() => {",
				"\treturn this.actions$.pipe(",
				"\t\t\tofType(${2:Feature}Actions.${3:action}),",
				"\t\t\t${4:operator}(() =>",
				"\t\t\t\t${5:apiSource}.pipe(",
				"\t\t\t\t\tmap(data => $2Actions.$3Success({ data })),",
				"\t\t\t\t\tcatchError(error => of($2Actions.$3Failure({ error }))))",
				"\t\t\t\t),",
				"\t);",
				"});"
			]
		},
		"NgRx Create Selector": {
			"prefix": "a-ngrx-create-selector",
			"description": "Creates an NgRx Selector",
			"body": [
				"export const select${1:Feature}${2:Property} = createSelector(",
				"\tselect$1,",
				"\t(state: $1State) => state.${3:property}",
				");"
			]
		},
		"NgRx Create Selector w/ Props": {
			"prefix": "a-ngrx-create-selector-props",
			"description": "Creates an NgRx Selector using props",
			"body": [
				"export const select${1:Feature}${2:Property} = createSelector(",
				"\tselect$1,",
				"\t(state: $1State, props) => ${3:selectLogic}",
				");"
			]
		},
		"NgRx Data Import Entity Data Module": {
			"prefix": "a-ngrx-data-entity-data-module-import",
			"description": "Import NgRx Entity Data Module",
			"body": [
				"EntityDataModule.forRoot(${1:entityConfig}),"
			]
		},
		"NgRx Data Entity Metadata": {
			"prefix": "a-ngrx-data-entity-metadata",
			"description": "NgRx Data Entity Metadata",
			"body": [
				"import { EntityMetadataMap } from '@ngrx/data';",
				"",
				"const entityMetadata: EntityMetadataMap = {",
				"  ${1:Model1}: {},${0}",
				"};",
				"",
				"export const entityConfig = {",
				"  entityMetadata",
				"};"
			]
		},
		"NgRx Data Entity Collection Data Service": {
			"prefix": "a-ngrx-data-entity-collection-data-service",
			"description": "NgRx Data Entity Collection Data Service",
			"body": [
				"import { Injectable } from '@angular/core';",
				"import {",
				"  EntityCollectionServiceBase,",
				"  EntityCollectionServiceElementsFactory",
				"} from '@ngrx/data';",
				"import { ${1:Model} } from '${2:../core}';",
				"",
				"@Injectable({ providedIn: ${3:'root'} })",
				"export class ${1:Model}Service extends EntityCollectionServiceBase<${1:Model}> {",
				"  constructor(serviceElementsFactory: EntityCollectionServiceElementsFactory) {",
				"    super('${1:Model}', serviceElementsFactory);",
				"  }",
				"}"
			]
		},
		"TrackBy Function": {
			"prefix": "a-trackby",
			"description": "TrackBy Function",
			"body": [
				"${1:trackBy}(index: number, ${2:name}: ${3:model}): ${4:number} {",
				"  return ${2:name}${5:.id};$0",
				"}"
			]
		}
}