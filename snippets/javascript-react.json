{
	"exportType": {
		"body": [
			"export type ${1:first} = {${2:second}}"
		],
		"key": "exportType",
		"prefix": "exptp",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"exportInterface": {
		"key": "exportInterface",
		"prefix": "expint",
		"body": [
			"export interface ${1:first} {${2:second}}"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"typescriptReactClassComponent": {
		"key": "typescriptReactClassComponent",
		"prefix": "tsrcc",
		"description": "Creates a React component class with ES7 module system and TypeScript interfaces",
		"body": [
			"import React, { Component } from 'react'",
			"",
			"type Props = {}",
			"",
			"type State = {}",
			"",
			"export default class ${1:${TM_FILENAME_BASE}} extends Component<Props, State> {",
			"  state = {}",
			"",
			"  render() {",
			"    return (",
			"      <div>${1:first}</div>",
			"    )",
			"  }",
			"}"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"typescriptReactClassExportComponent": {
		"key": "typescriptReactClassExportComponent",
		"prefix": "tsrce",
		"body": [
			"import React, { Component } from 'react'",
			"",
			"type Props = {}",
			"",
			"type State = {}",
			"",
			"class ${1:${TM_FILENAME_BASE}} extends Component<Props, State> {",
			"  state = {}",
			"",
			"  render() {",
			"    return (",
			"      <div>${1:first}</div>",
			"    )",
			"  }",
			"}",
			"",
			"export default ${1:${TM_FILENAME_BASE}}"
		],
		"description": "Creates a React component class with ES7 module system and TypeScript interfaces",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"typescriptReactFunctionalExportComponent": {
		"key": "typescriptReactFunctionalExportComponent",
		"prefix": "tsrfce",
		"body": [
			"import React from 'react'",
			"",
			"type Props = {}",
			"",
			"function ${1:${TM_FILENAME_BASE}}({}: Props) {",
			"  return (",
			"    <div>${1:first}</div>",
			"  )",
			"}",
			"",
			"export default ${1:${TM_FILENAME_BASE}}"
		],
		"description": "Creates a React Functional Component with ES7 module system and TypeScript interface",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"typescriptReactFunctionalComponent": {
		"key": "typescriptReactFunctionalComponent",
		"prefix": "tsrfc",
		"body": [
			"import React from 'react'",
			"",
			"type Props = {}",
			"",
			"export default function ${1:${TM_FILENAME_BASE}}({}: Props) {",
			"  return (",
			"    <div>${1:first}</div>",
			"  )",
			"}"
		],
		"description": "Creates a React Functional Component with ES7 module system and TypeScript interface",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"typescriptReactArrowFunctionExportComponent": {
		"key": "typescriptReactArrowFunctionExportComponent",
		"prefix": "tsrafce",
		"body": [
			"import React from 'react'",
			"",
			"type Props = {}",
			"",
			"const ${1:${TM_FILENAME_BASE}} = (props: Props) => {",
			"  return (",
			"    <div>${1:first}</div>",
			"  )",
			"}",
			"",
			"export default ${1:${TM_FILENAME_BASE}}"
		],
		"description": "Creates a React Arrow Function Component with ES7 module system and TypeScript interface",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"typescriptReactArrowFunctionComponent": {
		"key": "typescriptReactArrowFunctionComponent",
		"prefix": "tsrafc",
		"body": [
			"import React from 'react'",
			"",
			"type Props = {}",
			"",
			"const ${1:${TM_FILENAME_BASE}} = (props: Props) => {",
			"  return (",
			"    <div>${1:first}</div>",
			"  )",
			"}"
		],
		"description": "Creates a React Arrow Function Component with ES7 module system and TypeScript interface",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"typescriptReactClassPureComponent": {
		"key": "typescriptReactClassPureComponent",
		"prefix": "tsrpc",
		"body": [
			"import React, { PureComponent } from 'react'",
			"",
			"type Props = {}",
			"",
			"export default class ${1:${TM_FILENAME_BASE}} extends PureComponent<Props> {",
			"  render() {",
			"    return (",
			"      <div>${1:first}</div>",
			"    )",
			"  }",
			"}"
		],
		"description": "Creates a React pure component class with ES7 module system and TypeScript interface",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"typescriptReactClassExportPureComponent": {
		"key": "typescriptReactClassExportPureComponent",
		"prefix": "tsrpce",
		"body": [
			"import React, { PureComponent } from 'react'",
			"",
			"type Props = {}",
			"",
			"class ${1:${TM_FILENAME_BASE}} extends PureComponent<Props> {",
			"  render() {",
			"    return (",
			"      <div>${1:first}</div>",
			"    )",
			"  }",
			"}",
			"",
			"export default ${1:${TM_FILENAME_BASE}}"
		],
		"description": "Creates a React pure component class with ES7 module system and TypeScript interface",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"typescriptReactClassComponentRedux": {
		"key": "typescriptReactClassComponentRedux",
		"prefix": "tsrcredux",
		"body": [
			"import { connect } from 'react-redux'",
			"import React, { Component } from 'react'",
			"",
			"type Props = {}",
			"",
			"type State = {}",
			"",
			"export class ${1:${TM_FILENAME_BASE}} extends Component<Props, State> {",
			"  state = {}",
			"",
			"  render() {",
			"    return (",
			"      <div>${1:first}</div>",
			"    )",
			"  }",
			"}",
			"",
			"const mapStateToProps = (state) => ({})",
			"",
			"const mapDispatchToProps = {}",
			"",
			"export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})"
		],
		"description": "Creates a React component class with connected redux and ES7 module system and TypeScript interfaces",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"typescriptReactNativeArrowFunctionComponent": {
		"key": "typescriptReactNativeArrowFunctionComponent",
		"prefix": "tsrnf",
		"body": [
			"import { View, Text } from 'react-native'",
			"import React from 'react'",
			"",
			"type Props = {}",
			"",
			"const ${1:${TM_FILENAME_BASE}} = (props: Props) => {",
			"  return (",
			"    <View>",
			"      <Text>${1:first}</Text>",
			"    </View>",
			"  )",
			"}",
			"",
			"export default ${1:${TM_FILENAME_BASE}}"
		],
		"description": "Creates a React Native Arrow Function Component with ES7 module system in TypeScript",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"typescriptReactNativeArrowFunctionComponentWithStyles": {
		"key": "typescriptReactNativeArrowFunctionComponentWithStyles",
		"prefix": "tsrnfs",
		"body": [
			"import { StyleSheet, Text, View } from 'react-native'",
			"import React from 'react'",
			"",
			"type Props = {}",
			"",
			"const ${1:${TM_FILENAME_BASE}} = (props: Props) => {",
			"  return (",
			"    <View>",
			"      <Text>${1:first}</Text>",
			"    </View>",
			"  )",
			"}",
			"",
			"export default ${1:${TM_FILENAME_BASE}}",
			"",
			"const styles = StyleSheet.create({})"
		],
		"description": "Creates a React Native Arrow Function Component with ES7 module system, TypeScript interface and StyleSheet",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reactArrowFunctionComponent": {
		"key": "reactArrowFunctionComponent",
		"prefix": "rafc",
		"body": [
			"import React from 'react'",
			"",
			"export const ${1:${TM_FILENAME_BASE}} = () => {",
			"  return (",
			"    <div>${1:first}</div>",
			"  )",
			"}",
			""
		],
		"description": "Creates a React Arrow Function Component with ES7 module system",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reactArrowFunctionComponentWithPropTypes": {
		"key": "reactArrowFunctionComponentWithPropTypes",
		"prefix": "rafcp",
		"body": [
			"import React from 'react'",
			"import PropTypes from 'prop-types'",
			"",
			"const ${1:${TM_FILENAME_BASE}} = props => {",
			"  return (",
			"    <div>${1:first}</div>",
			"  )",
			"}",
			"",
			"${1:${TM_FILENAME_BASE}}.propTypes = {}",
			"",
			"export default ${1:${TM_FILENAME_BASE}}"
		],
		"description": "Creates a React Arrow Function Component with ES7 module system with PropTypes",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reactArrowFunctionExportComponent": {
		"key": "reactArrowFunctionExportComponent",
		"prefix": "rafce",
		"body": [
			"import React from 'react'",
			"",
			"const ${1:${TM_FILENAME_BASE}} = () => {",
			"  return (",
			"    <div>${1:first}</div>",
			"  )",
			"}",
			"",
			"export default ${1:${TM_FILENAME_BASE}}"
		],
		"description": "Creates a React Arrow Function Component with ES7 module system",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reactClassComponent": {
		"key": "reactClassComponent",
		"prefix": "rcc",
		"body": [
			"import React, { Component } from 'react'",
			"",
			"export default class ${1:${TM_FILENAME_BASE}} extends Component {",
			"  render() {",
			"    return (",
			"      <div>${1:first}</div>",
			"    )",
			"  }",
			"}",
			""
		],
		"description": "Creates a React component class with ES7 module system",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reactClassComponentPropTypes": {
		"key": "reactClassComponentPropTypes",
		"prefix": "rccp",
		"body": [
			"import PropTypes from 'prop-types'",
			"import React, { Component } from 'react'",
			"",
			"export default class ${1:${TM_FILENAME_BASE}} extends Component {",
			"  static propTypes = {${2:second}: ${3:third}}",
			"",
			"  render() {",
			"    return (",
			"      <div>${1:first}</div>",
			"    )",
			"  }",
			"}",
			""
		],
		"description": "Creates a React component class with PropTypes and ES7 module system",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reactClassComponentRedux": {
		"key": "reactClassComponentRedux",
		"prefix": "rcredux",
		"body": [
			"import React, { Component } from 'react'",
			"import { connect } from 'react-redux'",
			"",
			"export class ${1:${TM_FILENAME_BASE}} extends Component {",
			"  render() {",
			"    return (",
			"      <div>${1:first}</div>",
			"    )",
			"  }",
			"}",
			"",
			"const mapStateToProps = (state) => ({})",
			"",
			"const mapDispatchToProps = {}",
			"",
			"export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})"
		],
		"description": "Creates a React component class with connected redux and ES7 module system",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reactClassComponentReduxPropTypes": {
		"key": "reactClassComponentReduxPropTypes",
		"prefix": "rcreduxp",
		"body": [
			"import PropTypes from 'prop-types'",
			"import React, { Component } from 'react'",
			"import { connect } from 'react-redux'",
			"",
			"export class ${1:${TM_FILENAME_BASE}} extends Component {",
			"  static propTypes = {",
			"    ${2:second}: ${3:third}",
			"  }",
			"",
			"  render() {",
			"    return (",
			"      <div>${1:first}</div>",
			"    )",
			"  }",
			"}",
			"",
			"const mapStateToProps = (state) => ({})",
			"",
			"const mapDispatchToProps = {}",
			"",
			"export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})"
		],
		"description": "Creates a React component class with PropTypes with connected redux and ES7 module system",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reactClassExportComponent": {
		"key": "reactClassExportComponent",
		"prefix": "rce",
		"body": [
			"import React, { Component } from 'react'",
			"",
			"export class ${1:${TM_FILENAME_BASE}} extends Component {",
			"  render() {",
			"    return (",
			"      <div>${1:first}</div>",
			"    )",
			"  }",
			"}",
			"",
			"export default ${1:${TM_FILENAME_BASE}}"
		],
		"description": "Creates a React component class with ES7 module system",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reactClassExportComponentWithPropTypes": {
		"key": "reactClassExportComponentWithPropTypes",
		"prefix": "rcep",
		"body": [
			"import PropTypes from 'prop-types'",
			"import React, { Component } from 'react'",
			"",
			"export class ${1:${TM_FILENAME_BASE}} extends Component {",
			"  static propTypes = {}",
			"",
			"  render() {",
			"    return (",
			"      <div>${1:first}</div>",
			"    )",
			"  }",
			"}",
			"",
			"export default ${1:${TM_FILENAME_BASE}}"
		],
		"description": "Creates a React component class with ES7 module system",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reactClassExportPureComponent": {
		"key": "reactClassExportPureComponent",
		"prefix": "rpce",
		"body": [
			"import React, { PureComponent } from 'react'",
			"",
			"export class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
			"  render() {",
			"    return (",
			"      <div>${1:first}</div>",
			"    )",
			"  }",
			"}",
			"",
			"export default ${1:${TM_FILENAME_BASE}}"
		],
		"description": "Creates a React pure component class with ES7 module system export",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reactClassPureComponent": {
		"key": "reactClassPureComponent",
		"prefix": "rpc",
		"body": [
			"import React, { PureComponent } from 'react'",
			"",
			"export default class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
			"  render() {",
			"    return (",
			"      <div>${1:first}</div>",
			"    )",
			"  }",
			"}",
			""
		],
		"description": "Creates a React pure component class with ES7 module system",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reactClassPureComponentWithPropTypes": {
		"key": "reactClassPureComponentWithPropTypes",
		"prefix": "rpcp",
		"body": [
			"import PropTypes from 'prop-types'",
			"import React, { PureComponent } from 'react'",
			"",
			"export default class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
			"  static propTypes = {}",
			"",
			"  render() {",
			"    return (",
			"      <div>${1:first}</div>",
			"    )",
			"  }",
			"}",
			""
		],
		"description": "Creates a React component class with ES7 module system",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reactFunctionMemoComponent": {
		"key": "reactFunctionMemoComponent",
		"prefix": "rmc",
		"body": [
			"import React, { memo } from 'react'",
			"",
			"const ${1:${TM_FILENAME_BASE}} = memo(() => {",
			"  return (",
			"    <div>${1:first}</div>",
			"  )",
			"})",
			"",
			"export default ${1:${TM_FILENAME_BASE}}"
		],
		"description": "Creates a React Memo Function Component with ES7 module system",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reactFunctionMemoComponentWithPropTypes": {
		"key": "reactFunctionMemoComponentWithPropTypes",
		"prefix": "rmcp",
		"body": [
			"import PropTypes from 'prop-types'",
			"import React, { memo } from 'react'",
			"",
			"const ${1:${TM_FILENAME_BASE}} = memo((props) => {",
			"  return (",
			"    <div>${1:first}</div>",
			"  )",
			"})",
			"",
			"${1:${TM_FILENAME_BASE}}.propTypes = {}",
			"",
			"export default ${1:${TM_FILENAME_BASE}}"
		],
		"description": "Creates a React Memo Function Component with ES7 module system with PropTypes",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reactFunctionalComponent": {
		"key": "reactFunctionalComponent",
		"prefix": "rfc",
		"body": [
			"import React from 'react'",
			"",
			"export default function ${1:${TM_FILENAME_BASE}}() {",
			"  return (",
			"    <div>${1:first}</div>",
			"  )",
			"}",
			""
		],
		"description": "Creates a React Functional Component with ES7 module system",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reactFunctionalComponentRedux": {
		"key": "reactFunctionalComponentRedux",
		"prefix": "rfcredux",
		"body": [
			"import React from 'react'",
			"import { connect } from 'react-redux'",
			"",
			"export const ${1:${TM_FILENAME_BASE}} = (props) => {",
			"  return (",
			"    <div>${1:first}</div>",
			"  )",
			"}",
			"",
			"const mapStateToProps = (state) => ({})",
			"",
			"const mapDispatchToProps = {}",
			"",
			"export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})"
		],
		"description": "Creates a React functional component with connected redux and ES7 module system",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reactFunctionalComponentReduxPropTypes": {
		"key": "reactFunctionalComponentReduxPropTypes",
		"prefix": "rfcreduxp",
		"body": [
			"import PropTypes from 'prop-types'",
			"import React from 'react'",
			"import { connect } from 'react-redux'",
			"",
			"export const ${1:${TM_FILENAME_BASE}} = (props) => {",
			"  return (",
			"    <div>${1:first}</div>",
			"  )",
			"}",
			"",
			"${1:${TM_FILENAME_BASE}}.propTypes = {",
			"  ${2:second}: PropTypes.${3:third}",
			"}",
			"",
			"const mapStateToProps = (state) => ({})",
			"",
			"const mapDispatchToProps = {}",
			"",
			"export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})"
		],
		"description": "DEPRECATED: Creates a React functional component with PropTypes with connected redux and ES7 module system",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reactFunctionalComponentWithPropTypes": {
		"key": "reactFunctionalComponentWithPropTypes",
		"prefix": "rfcp",
		"body": [
			"import React from 'react'",
			"import PropTypes from 'prop-types'",
			"",
			"function ${1:${TM_FILENAME_BASE}}(props) {",
			"  return (",
			"    <div>${1:first}</div>",
			"  )",
			"}",
			"",
			"${1:${TM_FILENAME_BASE}}.propTypes = {}",
			"",
			"export default ${1:${TM_FILENAME_BASE}}",
			""
		],
		"description": "Creates a React Functional Component with ES7 module system with PropTypes",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reactFunctionalExportComponent": {
		"key": "reactFunctionalExportComponent",
		"prefix": "rfce",
		"body": [
			"import React from 'react'",
			"",
			"function ${1:${TM_FILENAME_BASE}}() {",
			"  return (",
			"    <div>${1:first}</div>",
			"  )",
			"}",
			"",
			"export default ${1:${TM_FILENAME_BASE}}"
		],
		"description": "Creates a React Functional Component with ES7 module system",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"consoleAssert": {
		"key": "consoleAssert",
		"prefix": "cas",
		"body": [
			"console.assert(${1:first}, ${2:second})"
		],
		"description": "If the specified expression is false, the message is written to the console along with a stack trace",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"consoleClear": {
		"key": "consoleClear",
		"prefix": "ccl",
		"body": [
			"console.clear()"
		],
		"description": "Clears the console",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"consoleCount": {
		"key": "consoleCount",
		"prefix": "cco",
		"body": [
			"console.count(${1:first})"
		],
		"description": "Writes the the number of times that count() has been invoked at the same line and with the same label",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"consoleDir": {
		"key": "consoleDir",
		"prefix": "cdi",
		"body": [
			"console.dir(${1:first})"
		],
		"description": "Prints a JavaScript representation of the specified object",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"consoleError": {
		"key": "consoleError",
		"prefix": "cer",
		"body": [
			"console.error(${1:first})"
		],
		"description": "Displays a message in the console and also includes a stack trace from where the method was called",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"consoleGroup": {
		"key": "consoleGroup",
		"prefix": "cgr",
		"body": [
			"console.group('${1:first}')"
		],
		"description": "Groups and indents all following output by an additional level, until console.groupEnd() is called.",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"consoleGroupEnd": {
		"key": "consoleGroupEnd",
		"prefix": "cge",
		"body": [
			"console.groupEnd()"
		],
		"description": "Closes out the corresponding console.group().",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"consoleLog": {
		"key": "consoleLog",
		"prefix": "clg",
		"body": [
			"console.log(${1:first})"
		],
		"description": "Displays a message in the console",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"consoleTrace": {
		"key": "consoleTrace",
		"prefix": "ctr",
		"body": [
			"console.trace(${1:first})"
		],
		"description": "Prints a stack trace from the point where the method was called",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"consoleLogObject": {
		"key": "consoleLogObject",
		"prefix": "clo",
		"body": [
			"console.log('${1:first}', ${1:first})"
		],
		"description": "Logs property with name.",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"consoleLogJson": {
		"key": "consoleLogJson",
		"prefix": "clj",
		"body": [
			"console.log('${1:first}', JSON.stringify(${1:first}, null, 2))"
		],
		"description": "Logs stringified JSON property with name.",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"consoleTime": {
		"key": "consoleTime",
		"prefix": "ctm",
		"body": [
			"console.time('${1:first}')"
		],
		"description": "Console time wrapper",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"consoleTimeEnd": {
		"key": "consoleTimeEnd",
		"prefix": "cte",
		"body": [
			"console.timeEnd('${1:first}')"
		],
		"description": "Console time end wrapper",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"consoleWarn": {
		"key": "consoleWarn",
		"prefix": "cwa",
		"body": [
			"console.warn(${1:first})"
		],
		"description": "Displays a message in the console but also displays a yellow warning icon along with the logged message",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"consoleInfo": {
		"key": "consoleInfo",
		"prefix": "cin",
		"body": [
			"console.info(${1:first})"
		],
		"description": "Displays a message in the console but also displays a blue information icon along with the logged message",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"consoleTable": {
		"key": "consoleTable",
		"prefix": "ctl",
		"body": [
			"console.table([${1:first}])"
		],
		"description": "Logs table to console",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"useImperativeHandle": {
		"key": "useImperativeHandle",
		"prefix": "useImperativeHandleSnippet",
		"body": [
			"useImperativeHandle(",
			"  ${1:first},",
			"  () => {",
			"    ${2:second}",
			"  },",
			"  [${3:third}],",
			")"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"useLayoutEffect": {
		"key": "useLayoutEffect",
		"prefix": "useLayoutEffectSnippet",
		"body": [
			"useLayoutEffect(() => {",
			"  ${1:first}",
			"",
			"  return () => {",
			"    ${2:second}",
			"  };",
			"}, [${3:third}])"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"useReducer": {
		"key": "useReducer",
		"prefix": "useReducerSnippet",
		"body": [
			"const [state, dispatch] = useReducer(${1:first}, ${2:second}, ${3:third})"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"importAs": {
		"key": "importAs",
		"prefix": "ima",
		"body": [
			"import { ${2:second} as ${3:third} } from '${1:first}'"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"importBrowserRouter": {
		"key": "importBrowserRouter",
		"prefix": "imbr",
		"body": [
			"import { BrowserRouter as Router } from 'react-router-dom'"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"importBrowserRouterWithRouteAndNavLink": {
		"key": "importBrowserRouterWithRouteAndNavLink",
		"prefix": "imrr",
		"body": [
			"import { BrowserRouter as Router, Route, NavLink } from 'react-router-dom'",
			""
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"importDestructing": {
		"key": "importDestructing",
		"prefix": "imd",
		"body": [
			"import { ${2:second} } from '${1:first}'"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"importEverything": {
		"key": "importEverything",
		"prefix": "ime",
		"body": [
			"import * as ${2:second} from '${1:first}'"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"importNoModuleName": {
		"key": "importNoModuleName",
		"prefix": "imn",
		"body": [
			"import '${1:first}'"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"importPropTypes": {
		"key": "importPropTypes",
		"prefix": "impt",
		"body": [
			"import PropTypes from 'prop-types'"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"importReact": {
		"key": "importReact",
		"prefix": "imr",
		"body": [
			"import React from 'react'"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"importReactDom": {
		"key": "importReactDom",
		"prefix": "imrd",
		"body": [
			"import ReactDOM from 'react-dom'"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"importReactWithComponent": {
		"key": "importReactWithComponent",
		"prefix": "imrc",
		"body": [
			"import React, { Component } from 'react'"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"importReactWithComponentAndPropTypes": {
		"key": "importReactWithComponentAndPropTypes",
		"prefix": "imrcp",
		"body": [
			"import React, { Component } from 'react'",
			"import PropTypes from 'prop-types'",
			""
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"importReactWithMemo": {
		"key": "importReactWithMemo",
		"prefix": "imrm",
		"body": [
			"import React, { memo } from 'react'"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"importReactWithMemoAndPropTypes": {
		"key": "importReactWithMemoAndPropTypes",
		"prefix": "imrmp",
		"body": [
			"import React, { memo } from 'react'",
			"import PropTypes from 'prop-types'",
			""
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"importReactWithPureComponent": {
		"key": "importReactWithPureComponent",
		"prefix": "imrpc",
		"body": [
			"import React, { PureComponent } from 'react'"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"importReactWithPureComponentAndPropTypes": {
		"key": "importReactWithPureComponentAndPropTypes",
		"prefix": "imrpcp",
		"body": [
			"import React, { PureComponent } from 'react'",
			"import PropTypes from 'prop-types'",
			""
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"importRouterLink": {
		"key": "importRouterLink",
		"prefix": "imbrl",
		"body": [
			"import { Link } from 'react-router-dom'"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"importRouterNavLink": {
		"key": "importRouterNavLink",
		"prefix": "imbrnl",
		"body": [
			"import { NavLink } from 'react-router-dom'"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"importRouterSetup": {
		"key": "importRouterSetup",
		"prefix": "imbrc",
		"body": [
			"import { Route, Switch, NavLink, Link } from 'react-router-dom'"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"importRouterSwitch": {
		"key": "importRouterSwitch",
		"prefix": "imbrs",
		"body": [
			"import { Switch } from 'react-router-dom'"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"import": {
		"key": "import",
		"prefix": "imp",
		"body": [
			"import ${2:second} from '${1:first}'"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propTypeArray": {
		"key": "propTypeArray",
		"prefix": "pta",
		"body": [
			"PropTypes.array"
		],
		"description": "Array prop type",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propTypeArrayRequired": {
		"key": "propTypeArrayRequired",
		"prefix": "ptar",
		"body": [
			"PropTypes.array.isRequired"
		],
		"description": "Array prop type required",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propTypeBool": {
		"key": "propTypeBool",
		"prefix": "ptb",
		"body": [
			"PropTypes.bool"
		],
		"description": "Bool prop type",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propTypeBoolRequired": {
		"key": "propTypeBoolRequired",
		"prefix": "ptbr",
		"body": [
			"PropTypes.bool.isRequired"
		],
		"description": "Bool prop type required",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propTypeFunc": {
		"key": "propTypeFunc",
		"prefix": "ptf",
		"body": [
			"PropTypes.func"
		],
		"description": "Func prop type",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propTypeFuncRequired": {
		"key": "propTypeFuncRequired",
		"prefix": "ptfr",
		"body": [
			"PropTypes.func.isRequired"
		],
		"description": "Func prop type required",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propTypeNumber": {
		"key": "propTypeNumber",
		"prefix": "ptn",
		"body": [
			"PropTypes.number"
		],
		"description": "Number prop type",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propTypeNumberRequired": {
		"key": "propTypeNumberRequired",
		"prefix": "ptnr",
		"body": [
			"PropTypes.number.isRequired"
		],
		"description": "Number prop type required",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propTypeObject": {
		"key": "propTypeObject",
		"prefix": "pto",
		"body": [
			"PropTypes.object"
		],
		"description": "Object prop type",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propTypeObjectRequired": {
		"key": "propTypeObjectRequired",
		"prefix": "ptor",
		"body": [
			"PropTypes.object.isRequired"
		],
		"description": "Object prop type required",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propTypeString": {
		"key": "propTypeString",
		"prefix": "pts",
		"body": [
			"PropTypes.string"
		],
		"description": "String prop type",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propTypeStringRequired": {
		"key": "propTypeStringRequired",
		"prefix": "ptsr",
		"body": [
			"PropTypes.string.isRequired"
		],
		"description": "String prop type required",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propTypeNode": {
		"key": "propTypeNode",
		"prefix": "ptnd",
		"body": [
			"PropTypes.node"
		],
		"description": "Anything that can be rendered: numbers, strings, elements or an array",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propTypeNodeRequired": {
		"key": "propTypeNodeRequired",
		"prefix": "ptndr",
		"body": [
			"PropTypes.node.isRequired"
		],
		"description": "Anything that can be rendered: numbers, strings, elements or an array required",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propTypeElement": {
		"key": "propTypeElement",
		"prefix": "ptel",
		"body": [
			"PropTypes.element"
		],
		"description": "React element prop type",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propTypeElementRequired": {
		"key": "propTypeElementRequired",
		"prefix": "ptelr",
		"body": [
			"PropTypes.element.isRequired"
		],
		"description": "React element prop type required",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propTypeInstanceOf": {
		"key": "propTypeInstanceOf",
		"prefix": "pti",
		"body": [
			"PropTypes.instanceOf($0)"
		],
		"description": "Is an instance of a class prop type",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propTypeInstanceOfRequired": {
		"key": "propTypeInstanceOfRequired",
		"prefix": "ptir",
		"body": [
			"PropTypes.instanceOf($0).isRequired"
		],
		"description": "Is an instance of a class prop type required",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propTypeEnum": {
		"key": "propTypeEnum",
		"prefix": "pte",
		"body": [
			"PropTypes.oneOf(['$0'])"
		],
		"description": "Prop type limited to specific values by treating it as an enum",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propTypeEnumRequired": {
		"key": "propTypeEnumRequired",
		"prefix": "pter",
		"body": [
			"PropTypes.oneOf(['$0']).isRequired"
		],
		"description": "Prop type limited to specific values by treating it as an enum required",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propTypeOneOfType": {
		"key": "propTypeOneOfType",
		"prefix": "ptet",
		"body": [
			"PropTypes.oneOfType([",
			"  $0",
			"])"
		],
		"description": "An object that could be one of many types",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propTypeOneOfTypeRequired": {
		"key": "propTypeOneOfTypeRequired",
		"prefix": "ptetr",
		"body": [
			"PropTypes.oneOfType([",
			"  $0",
			"]).isRequired"
		],
		"description": "An object that could be one of many types required",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propTypeArrayOf": {
		"key": "propTypeArrayOf",
		"prefix": "ptao",
		"body": [
			"PropTypes.arrayOf($0)"
		],
		"description": "An array of a certain type",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propTypeArrayOfRequired": {
		"key": "propTypeArrayOfRequired",
		"prefix": "ptaor",
		"body": [
			"PropTypes.arrayOf($0).isRequired"
		],
		"description": "An array of a certain type required",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propTypeObjectOf": {
		"key": "propTypeObjectOf",
		"prefix": "ptoo",
		"body": [
			"PropTypes.objectOf($0)"
		],
		"description": "An object with property values of a certain type",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propTypeObjectOfRequired": {
		"key": "propTypeObjectOfRequired",
		"prefix": "ptoor",
		"body": [
			"PropTypes.objectOf($0).isRequired"
		],
		"description": "An object with property values of a certain type required",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propTypeShape": {
		"key": "propTypeShape",
		"prefix": "ptsh",
		"body": [
			"PropTypes.shape({",
			"  $0",
			"})"
		],
		"description": "An object taking on a particular shape",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propTypeShapeRequired": {
		"key": "propTypeShapeRequired",
		"prefix": "ptshr",
		"body": [
			"PropTypes.shape({",
			"  $0",
			"}).isRequired"
		],
		"description": "An object taking on a particular shape required",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propTypeExact": {
		"key": "propTypeExact",
		"prefix": "ptex",
		"body": [
			"PropTypes.exact({",
			"  $0",
			"})"
		],
		"description": "An object with warnings on extra properties",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propTypeExactRequired": {
		"key": "propTypeExactRequired",
		"prefix": "ptexr",
		"body": [
			"PropTypes.exact({",
			"  $0",
			"}).isRequired"
		],
		"description": "An object with warnings on extra properties required",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propTypeAny": {
		"key": "propTypeAny",
		"prefix": "ptany",
		"body": [
			"PropTypes.any"
		],
		"description": "Any prop type",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reactNativeComponent": {
		"key": "reactNativeComponent",
		"prefix": "rnc",
		"body": [
			"import { Text, View } from 'react-native'",
			"import React, { Component } from 'react'",
			"",
			"export default class ${1:${TM_FILENAME_BASE}} extends Component {",
			"  render() {",
			"    return (",
			"      <View>",
			"        <Text>${1:first}</Text>",
			"      </View>",
			"    )",
			"  }",
			"}"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reactNativeComponentExport": {
		"key": "reactNativeComponentExport",
		"prefix": "rnce",
		"body": [
			"import { Text, View } from 'react-native'",
			"import React, { Component } from 'react'",
			"",
			"export class ${1:${TM_FILENAME_BASE}} extends Component {",
			"  render() {",
			"    return (",
			"      <View>",
			"        <Text>${1:first}</Text>",
			"      </View>",
			"    )",
			"  }",
			"}",
			"",
			"export default ${1:${TM_FILENAME_BASE}}"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reactNativeComponentWithStyles": {
		"key": "reactNativeComponentWithStyles",
		"prefix": "rncs",
		"body": [
			"import { Text, StyleSheet, View } from 'react-native'",
			"import React, { Component } from 'react'",
			"",
			"export default class ${1:${TM_FILENAME_BASE}} extends Component {",
			"  render() {",
			"    return (",
			"      <View>",
			"        <Text>${1:first}</Text>",
			"      </View>",
			"    )",
			"  }",
			"}",
			"",
			"const styles = StyleSheet.create({})"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reactNativeFunctionalComponent": {
		"key": "reactNativeFunctionalComponent",
		"prefix": "rnf",
		"body": [
			"import { View, Text } from 'react-native'",
			"import React from 'react'",
			"",
			"export default function ${1:${TM_FILENAME_BASE}}() {",
			"  return (",
			"    <View>",
			"      <Text>${1:first}</Text>",
			"    </View>",
			"  )",
			"}"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reactNativeFunctionalComponentWithStyles": {
		"key": "reactNativeFunctionalComponentWithStyles",
		"prefix": "rnfs",
		"body": [
			"import { StyleSheet, Text, View } from 'react-native'",
			"import React from 'react'",
			"",
			"export default function ${1:${TM_FILENAME_BASE}}() {",
			"  return (",
			"    <View>",
			"      <Text>${1:first}</Text>",
			"    </View>",
			"  )",
			"}",
			"",
			"const styles = StyleSheet.create({})"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reactNativeFunctionalExportComponent": {
		"key": "reactNativeFunctionalExportComponent",
		"prefix": "rnfe",
		"body": [
			"import { View, Text } from 'react-native'",
			"import React from 'react'",
			"",
			"const ${1:${TM_FILENAME_BASE}} = () => {",
			"  return (",
			"    <View>",
			"      <Text>${1:first}</Text>",
			"    </View>",
			"  )",
			"}",
			"",
			"export default ${1:${TM_FILENAME_BASE}}"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reactNativeFunctionalExportComponentWithStyles": {
		"key": "reactNativeFunctionalExportComponentWithStyles",
		"prefix": "rnfes",
		"body": [
			"import { StyleSheet, Text, View } from 'react-native'",
			"import React from 'react'",
			"",
			"const ${1:${TM_FILENAME_BASE}} = () => {",
			"  return (",
			"    <View>",
			"      <Text>${1:first}</Text>",
			"    </View>",
			"  )",
			"}",
			"",
			"export default ${1:${TM_FILENAME_BASE}}",
			"",
			"const styles = StyleSheet.create({})"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reactNativeImport": {
		"key": "reactNativeImport",
		"prefix": "imrn",
		"body": [
			"import { ${1:first} } from 'react-native'"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reactNativePureComponent": {
		"key": "reactNativePureComponent",
		"prefix": "rnpc",
		"body": [
			"import { Text, View } from 'react-native'",
			"import React, { PureComponent } from 'react'",
			"",
			"export default class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
			"  render() {",
			"    return (",
			"      <View>",
			"        <Text>${1:first}</Text>",
			"      </View>",
			"    )",
			"  }",
			"}"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reactNativePureComponentExport": {
		"key": "reactNativePureComponentExport",
		"prefix": "rnpce",
		"body": [
			"import { Text, View } from 'react-native'",
			"import React, { PureComponent } from 'react'",
			"",
			"export class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
			"  render() {",
			"    return (",
			"      <View>",
			"        <Text>${1:first}</Text>",
			"      </View>",
			"    )",
			"  }",
			"}",
			"",
			"export default ${1:${TM_FILENAME_BASE}}"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reactNativeStyles": {
		"key": "reactNativeStyles",
		"prefix": "rnstyle",
		"body": [
			"const styles = StyleSheet.create({${1:first}})"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"importReduxConnect": {
		"key": "importReduxConnect",
		"prefix": "redux",
		"body": [
			"import { connect } from 'react-redux'"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reduxAction": {
		"key": "reduxAction",
		"prefix": "rxaction",
		"body": [
			"export const ${1:first} = (payload) => ({",
			"  type: ${2:second},",
			"  payload",
			"})",
			""
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reduxConst": {
		"key": "reduxConst",
		"prefix": "rxconst",
		"body": [
			"export const ${1:first} = '${1:first}'"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reduxReducer": {
		"key": "reduxReducer",
		"prefix": "rxreducer",
		"body": [
			"const initialState = {}",
			"",
			"export default (state = initialState, { type, payload }) => {",
			"  switch (type) {",
			"",
			"  case ${1:first}:",
			"    return { ...state, ...payload }",
			"",
			"  default:",
			"    return state",
			"  }",
			"}",
			""
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reduxSelector": {
		"key": "reduxSelector",
		"prefix": "rxselect",
		"body": [
			"import { createSelector } from 'reselect'",
			"",
			"export const ${1:first} = state => state.${2:second}"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"reduxSlice": {
		"key": "reduxSlice",
		"prefix": "rxslice",
		"body": [
			"import { createSlice } from '@reduxjs/toolkit'",
			"",
			"const initialState = {",
			"",
			"}",
			"",
			"const ${1:${TM_FILENAME_BASE}} = createSlice({",
			"  name: ${2:second},",
			"  initialState,",
			"  reducers: {}",
			"});",
			"",
			"export const {} = ${1:${TM_FILENAME_BASE}}.actions",
			"",
			"export default ${1:${TM_FILENAME_BASE}}.reducer"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"mappingToProps": {
		"key": "mappingToProps",
		"prefix": "reduxmap",
		"body": [
			"const mapStateToProps = (state) => ({})",
			"",
			"const mapDispatchToProps = {}"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"describeBlock": {
		"key": "describeBlock",
		"prefix": "desc",
		"body": [
			"describe('${1:first}', () => { ${2:second} })"
		],
		"description": "Testing `describe` block",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"itAsyncBlock": {
		"key": "itAsyncBlock",
		"prefix": "tita",
		"body": [
			"it('should ${1:first}', async () => { ${2:second} })"
		],
		"description": "Testing asynchronous `it` block",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"itBlock": {
		"key": "itBlock",
		"prefix": "tit",
		"body": [
			"it('should ${1:first}', () => { ${2:second} })"
		],
		"description": "Testing `it` block",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"setupReactComponentTestWithRedux": {
		"key": "setupReactComponentTestWithRedux",
		"prefix": "srtest",
		"body": [
			"import React from 'react'",
			"import renderer from 'react-test-renderer'",
			"import { Provider } from 'react-redux'",
			"",
			"import store from '~/store'",
			"import { ${1:${TM_FILENAME_BASE}} } from '../${1:${TM_FILENAME_BASE}}'",
			"",
			"describe('<${1:${TM_FILENAME_BASE}} />', () => {",
			"  const defaultProps = {}",
			"  const wrapper = renderer.create(",
			"    <Provider store={store}>",
			"     <${1:${TM_FILENAME_BASE}} {...defaultProps} />",
			"    </Provider>,",
			"  )",
			"",
			"  test('render', () => {",
			"    expect(wrapper).toMatchSnapshot()",
			"  })",
			"})"
		],
		"description": "Create test component",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"setupReactNativeTest": {
		"key": "setupReactNativeTest",
		"prefix": "sntest",
		"body": [
			"import 'react-native'",
			"import React from 'react'",
			"import renderer from 'react-test-renderer'",
			"",
			"import ${1:${TM_FILENAME_BASE}} from '../${1:${TM_FILENAME_BASE}}'",
			"",
			"describe('<${1:${TM_FILENAME_BASE}} />', () => {",
			"  const defaultProps = {}",
			"  const wrapper = renderer.create(<${1:${TM_FILENAME_BASE}} {...defaultProps} />)",
			"",
			"  test('render', () => {",
			"    expect(wrapper).toMatchSnapshot()",
			"  })",
			"})"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"setupReactNativeTestWithRedux": {
		"key": "setupReactNativeTestWithRedux",
		"prefix": "snrtest",
		"body": [
			"import 'react-native'",
			"import React from 'react'",
			"import renderer from 'react-test-renderer'",
			"import { Provider } from 'react-redux'",
			"",
			"import store from '~/store'",
			"import ${1:${TM_FILENAME_BASE}} from '../${1:${TM_FILENAME_BASE}}'",
			"",
			"describe('<${1:${TM_FILENAME_BASE}} />', () => {",
			"  const defaultProps = {}",
			"  const wrapper = renderer.create(",
			"    <Provider store={store}>",
			"      <${1:${TM_FILENAME_BASE}} {...defaultProps} />",
			"    </Provider>,",
			"  )",
			"",
			"  test('render', () => {",
			"    expect(wrapper).toMatchSnapshot()",
			"  })",
			"})"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"setupReactTest": {
		"key": "setupReactTest",
		"prefix": "stest",
		"body": [
			"import React from 'react'",
			"import renderer from 'react-test-renderer'",
			"",
			"import { ${1:${TM_FILENAME_BASE}} } from '../${1:${TM_FILENAME_BASE}}'",
			"",
			"describe('<${1:${TM_FILENAME_BASE}} />', () => {",
			"  const defaultProps = {}",
			"  const wrapper = renderer.create(<${1:${TM_FILENAME_BASE}} {...defaultProps} />)",
			"",
			"  test('render', () => {",
			"    expect(wrapper).toMatchSnapshot()",
			"  })",
			"})"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"testAsyncBlock": {
		"key": "testAsyncBlock",
		"prefix": "testa",
		"body": [
			"test('should ${1:first}', async () => { ${2:second} })"
		],
		"description": "Testing `asynchronous test` block",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"testBlock": {
		"key": "testBlock",
		"prefix": "test",
		"body": [
			"test('should ${1:first}', () => { ${2:second} })"
		],
		"description": "Testing `test` block",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"exportDefault": {
		"key": "exportDefault",
		"prefix": "exp",
		"body": [
			"export default ${1:first}"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"exportDestructing": {
		"key": "exportDestructing",
		"prefix": "exd",
		"body": [
			"export { ${2:second} } from '${1:first}'"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"exportAs": {
		"key": "exportAs",
		"prefix": "exa",
		"body": [
			"export { ${2:second} as ${3:third} } from '${1:first}'"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"exportNamedFunction": {
		"key": "exportNamedFunction",
		"prefix": "enf",
		"body": [
			"export const ${1:first} = (${2:second}) => {${3:third}}"
		],
		"description": "Export named function",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"exportDefaultFunction": {
		"key": "exportDefaultFunction",
		"prefix": "edf",
		"body": [
			"export default (${1:first}) => {${2:second}}"
		],
		"description": "Export default function",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"exportDefaultNamedFunction": {
		"key": "exportDefaultNamedFunction",
		"prefix": "ednf",
		"body": [
			"export default function ${1:first}(${2:second}) {${3:third}}"
		],
		"description": "Export default named function",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"method": {
		"key": "method",
		"prefix": "met",
		"body": [
			"${1:first} = (${2:second}) => {${3:third}}"
		],
		"description": "Creates a method inside a class",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propertyGet": {
		"key": "propertyGet",
		"prefix": "pge",
		"body": [
			"get ${1:first}() {",
			"  return this.${2:second}",
			"}"
		],
		"description": "Creates a getter property inside a class",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"propertySet": {
		"key": "propertySet",
		"prefix": "pse",
		"body": [
			"set ${1:first}(${2:second}) {${3:third}}"
		],
		"description": "Creates a setter property inside a class",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"forEach": {
		"key": "forEach",
		"prefix": "fre",
		"body": [
			"${1:first}.forEach(${2:second} => {${3:third}})"
		],
		"description": "Creates a forEach statement",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"forOf": {
		"key": "forOf",
		"prefix": "fof",
		"body": [
			"for(let ${1:first} of ${2:second}) {${3:third}}"
		],
		"description": "Iterating over property names of iterable objects",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"forIn": {
		"key": "forIn",
		"prefix": "fin",
		"body": [
			"for(let ${1:first} in ${2:second}) {${3:third}}"
		],
		"description": "Iterating over property values of iterable objects",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"anonymousFunction": {
		"key": "anonymousFunction",
		"prefix": "anfn",
		"body": [
			"(${1:first}) => { ${2:second} }"
		],
		"description": "Creates an anonymous function",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"namedFunction": {
		"key": "namedFunction",
		"prefix": "nfn",
		"body": [
			"const ${1:first} = (${2:second}) => { ${3:third} }"
		],
		"description": "Creates a named function",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"destructingObject": {
		"key": "destructingObject",
		"prefix": "dob",
		"body": [
			"const {${2:second}} = ${1:first}"
		],
		"description": "Creates and assigns a local variable using object destructing",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"destructingArray": {
		"key": "destructingArray",
		"prefix": "dar",
		"body": [
			"const [${2:second}] = ${1:first}"
		],
		"description": "Creates and assigns a local variable using array destructing",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"setInterval": {
		"key": "setInterval",
		"prefix": "sti",
		"body": [
			"setInterval(() => { ${1:first} }, ${2:second})"
		],
		"description": "Executes the given function at specified intervals",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"setTimeOut": {
		"key": "setTimeOut",
		"prefix": "sto",
		"body": [
			"setTimeout(() => { ${1:first} }, ${2:second})"
		],
		"description": "Executes the given function after the specified delay",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"promise": {
		"key": "promise",
		"prefix": "prom",
		"body": [
			"return new Promise((resolve, reject) => { ${1:first} })"
		],
		"description": "Creates and returns a new Promise in the standard ES7 syntax",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"destructProps": {
		"key": "destructProps",
		"prefix": "cp",
		"body": [
			"const { ${1:first} } = this.props"
		],
		"description": "Creates and assigns a local variable using props destructing",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"destructState": {
		"key": "destructState",
		"prefix": "cs",
		"body": [
			"const { ${1:first} } = this.state"
		],
		"description": "Creates and assigns a local variable using state destructing",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"emptyState": {
		"key": "emptyState",
		"prefix": "est",
		"body": [
			"state = { ${1:first} }"
		],
		"description": "Creates empty state object. To be used in a constructor.",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"createContext": {
		"key": "createContext",
		"prefix": "rcontext",
		"body": [
			"const ${1:first} = React.createContext()"
		],
		"description": "Create React context",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"createRef": {
		"key": "createRef",
		"prefix": "cref",
		"body": [
			"this.${1:first}Ref = React.createRef()"
		],
		"description": "Create ref statement used inside constructor",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"bindThis": {
		"key": "bindThis",
		"prefix": "bnd",
		"body": [
			"this.${1:first} = this.${1:first}.bind(this)"
		],
		"description": "Binds this to a method",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"commentBigBlock": {
		"key": "commentBigBlock",
		"prefix": "cmmb",
		"body": [
			"/**",
			" * ${1:first}",
			" */"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"hocComponentWithRedux": {
		"key": "hocComponentWithRedux",
		"prefix": "hocredux",
		"body": [
			"import React from 'react'",
			"import { connect } from 'react-redux'",
			"import PropTypes from 'prop-types'",
			"",
			"export const mapStateToProps = state => ({})",
			"",
			"export const mapDispatchToProps = {}",
			"",
			"export const ${1:first} = (WrappedComponent) => {",
			"  const hocComponent = ({ ...props }) => <WrappedComponent {...props} />",
			"",
			"  hocComponent.propTypes = {}",
			"",
			"  return hocComponent",
			"}",
			"",
			"export default WrapperComponent => connect(mapStateToProps, mapDispatchToProps)(${1:first}(WrapperComponent))",
			""
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"hocComponent": {
		"key": "hocComponent",
		"prefix": "hoc",
		"body": [
			"import React from 'react'",
			"import PropTypes from 'prop-types'",
			"",
			"export default (WrappedComponent) => {",
			"  const hocComponent = ({ ...props }) => <WrappedComponent {...props} />",
			"",
			"  hocComponent.propTypes = {}",
			"",
			"  return hocComponent",
			"}",
			""
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"typeofSnippet": {
		"key": "typeofSnippet",
		"prefix": "tpf",
		"body": [
			"typeof ${1:first}"
		],
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"Ajax": {
		"prefix": "vajax",
		"body": [
			"// Must be scoped in an async function",
			"try {",
			"   const data = await api.fetch(${reqUrl})",
			"} catch {",
			"   console.log('error', error)",
			"}"
		],
		"description": "Provides a JavaScript interface for accessing and manipulating parts of the HTTP pipeline, such as requests and responses."
	},
	"FadeIn": {
		"prefix": "vfadeIn",
		"body": [
			"const fadeIn = el = {",
			"   el.style.opacity = 0",
			"   let last = +new Date()",
			"   const tick = () => {",
			"       el.style.opacity = +el.style.opacity + (new Date() - last) / 400",
			"       last = +new Date()",
			"       if (+el.style.opacity < 1) {",
			"           (window.requestAnimationFrame && requestAnimationFrame(tick)) || setTimeout(tick, 16)",
			"       }",
			"   }",
			"   tick()",
			"}",
			"fadeIn(${el})"
		],
		"description": "Display the matched elements by fading them using opacity."
	},
	"Hide": {
		"prefix": "vhide",
		"body": [
			"${el}.style.display = 'none'"
		],
		"description": "Hide the matched elements."
	},
	"Show": {
		"prefix": "vshow",
		"body": [
			"${el}.style.display = ''"
		],
		"description": "Show the matched elements."
	},
	"AddClass": {
		"prefix": "vaddClass",
		"body": [
			"if (${el}.classList) {",
			"   ${el}.classList.add(${className})",
			"}"
		],
		"description": "Adds the specified class(es) to each of the set of matched elements."
	},
	"After": {
		"prefix": "vafter",
		"body": [
			"${el}.insertAdjacentHTML('afterend', ${htmlString})"
		],
		"description": "Insert content, specified by the parameter, after each element in the set of matched elements."
	},
	"Append": {
		"prefix": "vappend",
		"body": [
			"${parent}.appendChild(${el})"
		],
		"description": "Insert content, specified by the parameter, to the end of each element in the set of matched elements."
	},
	"Before": {
		"prefix": "vbefore",
		"body": [
			"${el}.insertAdjacentHTML('beforebegin', ${htmlString})"
		],
		"description": "Insert content, specified by the parameter, before each element in the set of matched elements."
	},
	"Children": {
		"prefix": "vchildren",
		"body": [
			"${el}.children"
		],
		"description": "Get the children of each element in the set of matched elements, optionally filtered by a selector."
	},
	"Clone": {
		"prefix": "vclone",
		"body": [
			"${el}.cloneNode(true)"
		],
		"description": "Create a deep copy of the set of matched elements."
	},
	"Contains": {
		"prefix": "vcontains",
		"body": [
			"if (${el} !== ${child} && ${el}.contains(${child})) {",
			"   $0",
			"}"
		],
		"description": "Check to see if a DOM element is a descendant of another DOM element."
	},
	"ContainsSelector": {
		"prefix": "vcontainsSelector",
		"body": [
			"if (${el}.querySelector(${selector}) !== null) {",
			"   $0",
			"}"
		],
		"description": "Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element."
	},
	"Each": {
		"prefix": "veach",
		"body": [
			"const ${elements} = document.querySelectorAll(${selector})",
			"${elements}.forEach(${element} => {",
			"   $0",
			"}"
		],
		"description": "Iterate over a jQuery object, executing a function for each matched element."
	},
	"Empty": {
		"prefix": "vempty",
		"body": [
			"${el}.innerHTML = ''"
		],
		"description": "Remove all child nodes of the set of matched elements from the DOM."
	},
	"Filter": {
		"prefix": "vfilter",
		"body": [
			"Array.prototype.filter.call(document.querySelectorAll(${selector}), ${filterFn})"
		],
		"description": "Reduce the set of matched elements to those that match the selector or pass the function's test."
	},
	"Find Children": {
		"prefix": "vfindChild",
		"body": [
			"${el}.querySelectorAll(${selector})"
		],
		"description": "Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element."
	},
	"Find Elements": {
		"prefix": "vfind",
		"body": [
			"document.querySelectorAll(${selector})"
		],
		"description": "Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element."
	},
	"GetAttributes": {
		"prefix": "vgetAttr",
		"body": [
			"${el}.getAttribute(${attribute})"
		],
		"description": "Get the value of an attribute for the first element in the set of matched elements."
	},
	"Html": {
		"prefix": "vgetHtml",
		"body": [
			"${el}.innerHTML"
		],
		"description": "Get the HTML contents of the first element in the set of matched elements."
	},
	"Outer Html": {
		"prefix": "vouterHtml",
		"body": [
			"${el}.outerHTML"
		],
		"description": "Get the outer HTML contents of the first element in the set of matched elements."
	},
	"Css": {
		"prefix": "vcss",
		"body": [
			"getComputedStyle(${el})[${ruleName}]"
		],
		"description": "Get the computed style properties for the first element in the set of matched elements."
	},
	"Text": {
		"prefix": "vtext",
		"body": [
			"${el}.textContent"
		],
		"description": "Get the combined text contents of each element in the set of matched elements, including their descendants."
	},
	"HasClass": {
		"prefix": "vhasClass",
		"body": [
			"${el}.classList.contains(${class})"
		],
		"description": "Determine whether any of the matched elements are assigned the given class."
	},
	"Is": {
		"prefix": "vis",
		"body": [
			"if (${el} === ${otherEl}) {",
			"   $0",
			"}"
		],
		"description": "Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments."
	},
	"Next": {
		"prefix": "vnext",
		"body": [
			"${el}.nextElementSibling"
		],
		"description": "Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector."
	},
	"Offset": {
		"prefix": "voffset",
		"body": [
			"const rect = ${el}.getBoundingClientRect()",
			"const offset = {",
			"   top: rect.top + document.body.scrollTop,",
			"   left: rect.left + document.body.scrollLeft",
			"}"
		],
		"description": "Get the current coordinates of the first element in the set of matched elements, relative to the document."
	},
	"Offset Parent": {
		"prefix": "voffsetParent",
		"body": [
			"if (${el}.offsetParent || ${el}) {",
			"   $0",
			"}"
		],
		"description": "Get the closest ancestor element that is positioned."
	},
	"OuterHeight": {
		"prefix": "vouterHeight",
		"body": [
			"${el}.offsetHeight"
		],
		"description": "Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements."
	},
	"OuterHeight With Margin": {
		"prefix": "vouterHeightMargin",
		"body": [
			"const outerHeight = el => {",
			"   let height = el.offsetHeight",
			"   const style = getComputedStyle(el)",
			"   height += parseInt(style.marginTop) + parseInt(style.marginBottom)",
			"   return height",
			"}",
			"outerHeight(${el})"
		],
		"description": "Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements."
	},
	"OuterWidth": {
		"prefix": "vouterWidth",
		"body": [
			"${el}.offsetWidth"
		],
		"description": "Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements."
	},
	"OuterWidth With Margin": {
		"prefix": "vouterWidthMargin",
		"body": [
			"const outerWidth = el => {",
			"   let width = el.offsetWidth",
			"   const style = getComputedStyle(el)",
			"   width += parseInt(style.marginLeft) + parseInt(style.marginRight)",
			"   return width",
			"}",
			"outerWidth(${el})"
		],
		"description": "Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements."
	},
	"Parent": {
		"prefix": "vparent",
		"body": [
			"${el}.parentNode"
		],
		"description": "Get the parent of each element in the current set of matched elements, optionally filtered by a selector."
	},
	"Position": {
		"prefix": "vposition",
		"body": [
			"const position = { left: ${el}.offsetLeft, top: ${el}.offsetTop }"
		],
		"description": "Get the current coordinates of the first element in the set of matched elements, relative to the offset parent."
	},
	"Position relative to viewport": {
		"prefix": "vpositionvp",
		"body": [
			"const position = ${el}.getBoundingClientRect()"
		],
		"description": "Get the current coordinates of the first element in the set of matched elements, relative to viewport."
	},
	"Prepend": {
		"prefix": "vprepend",
		"body": [
			"${parent}.insertBefore(${el}, ${parent}.firstChild)"
		],
		"description": "Insert content, specified by the parameter, to the beginning of each element in the set of matched elements."
	},
	"Prev": {
		"prefix": "vprev",
		"body": [
			"${el}.previousElementSibling"
		],
		"description": "Get the immediately preceding sibling of each element in the set of matched elements. If a selector is provided, it retrieves the previous sibling only if it matches that selector."
	},
	"Remove": {
		"prefix": "vremove",
		"body": [
			"${el}.parentNode.removeChild(${el})"
		],
		"description": "Remove the set of matched elements from the DOM."
	},
	"RemoveClass": {
		"prefix": "vremoveClass",
		"body": [
			"if (${el}.classList) {",
			"   ${el}.classList.remove(className)",
			"}"
		],
		"description": "Remove a single class, multiple classes, or all classes from each element in the set of matched elements."
	},
	"Replace": {
		"prefix": "vreplace",
		"body": [
			"${el}.outerHTML = ${string}"
		],
		"description": "Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed."
	},
	"Set Attributes": {
		"prefix": "vsetAttr",
		"body": [
			"${el}.setAttribute(${attribute}, ${val})"
		],
		"description": "Set one or more attributes for the set of matched elements."
	},
	"Set Html": {
		"prefix": "vsetHtml",
		"body": [
			"${el}.innerHTML = ${string}"
		],
		"description": "Set the HTML contents of each element in the set of matched elements."
	},
	"Set Style": {
		"prefix": "vsetStyle",
		"body": [
			"${el}.style.${rulename} = ${val}"
		],
		"description": "Set one or more CSS properties for the set of matched elements."
	},
	"Siblings": {
		"prefix": "vsiblings",
		"body": [
			"Array.prototype.filter.call(${el}.parentNode.children, child => child !== ${el})"
		],
		"description": "Get the siblings of each element in the set of matched elements, optionally filtered by a selector."
	},
	"Toggle Class": {
		"prefix": "vtoggleClass",
		"body": [
			"if (${el}.classList) {",
			"   ${el}.classList.toggle(${className})",
			"}"
		],
		"description": "Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the state argument."
	},
	"Off": {
		"prefix": "voff",
		"body": [
			"${el}.removeEventListener(${eventName}, ${eventHandler})"
		],
		"description": "Remove an event handler."
	},
	"On": {
		"prefix": "von",
		"body": [
			"${el}.addEventListener(${eventName}, ${eventHandler})"
		],
		"description": "Bind an event handler."
	},
	"Ready": {
		"prefix": "vready",
		"body": [
			"document.addEventListener('DOMContentLoaded', ${fn})"
		],
		"description": "Specify a function to execute when the DOM is fully loaded."
	},
	"Trigger": {
		"prefix": "vtrigger",
		"body": [
			"const event = document.createEvent('HTMLEvents')",
			"event.initEvent(${eventType}, true, false)",
			"${el}.dispatchEvent(event)"
		],
		"description": "Execute all handlers and behaviors attached to the matched elements for the given event type."
	},
	"Bind": {
		"prefix": "vbind",
		"body": [
			"${fn}.bind(${context})"
		],
		"description": "Takes a function and returns a new one that will always have a particular context."
	},
	"In Array": {
		"prefix": "vinArray",
		"body": [
			"if (${array}.indexOf(${item}) !== -1) {",
			"   $0",
			"}"
		],
		"description": "Search for a specified value within an array and return its index (or -1 if not found)."
	},
	"Is Array": {
		"prefix": "visArray",
		"body": [
			"Array.isArray(${arr})"
		],
		"description": "Determine whether the argument is an array."
	},
	"Map": {
		"prefix": "vmap",
		"body": [
			"${array}.map(${val} => $0}"
		],
		"description": "Translate all items in an array or object to new array of items."
	},
	"Now": {
		"prefix": "vnow",
		"body": [
			"Date.now()"
		],
		"description": "Return a number representing the current time."
	},
	"Parse Html": {
		"prefix": "vparseHtml",
		"body": [
			"const parseHTML = str => {",
			"const tmp = document.implementation.createHTMLDocument()",
			"tmp.body.innerHTML = str",
			"return tmp.body.children",
			"}",
			"parseHTML(${htmlString})"
		],
		"description": "Parses a string into an array of DOM nodes."
	},
	"Parse Json": {
		"prefix": "vparseJson",
		"body": [
			"JSON.parse(${string})"
		],
		"description": "Takes a well-formed JSON string and returns the resulting JavaScript value."
	},
	"Trim": {
		"prefix": "vtrim",
		"body": [
			"${string}.trim()"
		],
		"description": "Remove the whitespace from the beginning and end of a string."
	},
	"Type": {
		"prefix": "vtype",
		"body": [
			"Object.prototype.toString.call(${obj}).replace(/^\\[object (.+)\\]$/, '$1').toLowerCase()"
		],
		"description": "Determine the internal JavaScript [[Class]] of an object."
	},
	"destructuring of props": {
		"prefix": "dp",
		"body": [
			"const { ${1:name} } = this.props"
		]
	},
	"destructuring of state": {
		"prefix": "ds",
		"body": [
			"const { ${1:name} } = this.state"
		]
	},
	"if falsy return null": {
		"prefix": "ifr",
		"body": "if (!${1:condition}) {\n\treturn null\n}"
	},
	"reactClassCompoment": {
		"prefix": "rcc",
		"body": "import React, { Component } from 'react'\n\nclass ${TM_FILENAME_BASE} extends Component {\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ${1}",
		"description": "Creates a React component class"
	},
	"reactJustClassCompoment": {
		"prefix": "rcjc",
		"body": "class ${TM_FILENAME_BASE} extends Component {\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n",
		"description": "Creates a React component class"
	},
	"reactClassCompomentPropTypes": {
		"prefix": "rccp",
		"body": "import React, { Component, PropTypes } from 'react'\n\nclass ${TM_FILENAME_BASE} extends Component {\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n${1}.propTypes = {\n\n}\n\nexport default ${1}",
		"description": "Creates a React component class with PropTypes"
	},
	"reactClassCompomentWithMethods": {
		"prefix": "rcfc",
		"body": "import React, { Component, PropTypes } from 'react'\n\nclass ${TM_FILENAME_BASE} extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t}\n\n\tcomponentWillMount () {\n\n\t}\n\n\tcomponentDidMount () {\n\n\t}\n\n\tcomponentWillReceiveProps (nextProps) {\n\n\t}\n\n\tshouldComponentUpdate (nextProps, nextState) {\n\n\t}\n\n\tcomponentWillUpdate (nextProps, nextState) {\n\n\t}\n\n\tcomponentDidUpdate (prevProps, prevState) {\n\n\t}\n\n\tcomponentWillUnmount () {\n\n\t}\n\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n${1}.propTypes = {\n\n}\n\nexport default ${1}",
		"description": "Creates a React component class with PropTypes and all lifecycle methods"
	},
	"reactFunctionComponent": {
		"prefix": "rfc",
		"body": "import React from 'react'\n\nconst ${TM_FILENAME_BASE} = () => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\nexport default ${1}",
		"description": "Creates a React function component without PropTypes"
	},
	"reactFunctionComponentWithEmotion": {
		"prefix": "rfce",
		"body": "import { css } from '@emotion/core'\nimport React from 'react'\n\nexport const ${TM_FILENAME_BASE} = () => {\n\treturn (\n\t\t<div css={css``}>\n\t\t\t$0\n\t\t</div>\n\t)\n}",
		"description": "Creates a React functional component with emotion"
	},
	"reactStatelessProps": {
		"prefix": "rfcp",
		"body": "import React, { PropTypes } from 'react'\n\nconst ${TM_FILENAME_BASE} = props => {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t</div>\n\t)\n}\n\n${1}.propTypes = {\n\t$0\n}\n\nexport default ${1}",
		"description": "Creates a React function component with PropTypes"
	},
	"classConstructor": {
		"prefix": "con",
		"body": "constructor (props) {\n\tsuper(props)\n\t$0\n}\n",
		"description": "Adds a default constructor for the class that contains props as arguments"
	},
	"classConstructorContext": {
		"prefix": "conc",
		"body": "constructor (props, context) {\n\tsuper(props, context)\n\t$0\n}\n",
		"description": "Adds a default constructor for the class that contains props and context as arguments"
	},
	"componentGetDerivedStateFromProps": {
		"prefix": "cgd",
		"body": "\nstatic getDerivedStateFromProps(nextProps, prevState) {\n\t$0\n}\n",
		"description": "Invoked after a component is instantiated as well as when it receives new props. It should return an object to update state, or null to indicate that the new props do not require any state updates."
	},
	"componentRender": {
		"prefix": "ren",
		"body": "render () {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}",
		"description": "When called, it should examine this.props and this.state and return a single child element."
	},
	"componentSetStateObject": {
		"prefix": "sst",
		"body": "this.setState($0)",
		"description": "Performs a shallow merge of nextState into current state"
	},
	"componentSetStateFunc": {
		"prefix": "ssf",
		"body": "this.setState((state, props) => { return { $0 }})\n",
		"description": "Performs a shallow merge of nextState into current state"
	},
	"componentProps": {
		"prefix": "tp",
		"body": "this.props.$0",
		"description": "Access component's props"
	},
	"componentState": {
		"prefix": "ts",
		"body": "this.state.$0",
		"description": "Access component's state"
	},
	"jsx element": {
		"prefix": "j",
		"body": "<${1:elementName}>\n\t$0\n</${1}>",
		"description": "an element"
	},
	"jsx element self closed": {
		"prefix": "jc",
		"body": "<${1:elementName} />",
		"description": "an element self closed"
	},
	"jsx elements map": {
		"prefix": "jm",
		"body": "{${1:array}.map((item) => <${2:elementName} key={item.id}>\n\t$0\n</${2}>)}",
		"description": "an element self closed"
	},
	"jsx elements map with return": {
		"prefix": "jmr",
		"body": "{${1:array}.map((item) => {\n\treturn <${2:elementName} key={item.id}>\n\t$0\n</${2}>\n})}",
		"description": "an element self closed"
	},
	"jsx element wrap selection": {
		"prefix": "jsx wrap selection with element",
		"body": "<${1:elementName}>\n\t{$TM_SELECTED_TEXT}\n</${1}>",
		"description": "an element"
	},
	"useState": {
		"prefix": "us",
		"body": "const [${1}, set${1/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}] = useState(${2:default${1/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}});",
		"description": "use state hook"
	},
	"useContext": {
		"prefix": "uc",
		"body": [
			"const $1 = useContext($2)$0"
		],
		"description": "React useContext() hook"
	},
	"useRef": {
		"prefix": "ur",
		"body": [
			"const ${1:elName}El = useRef(null)$0"
		],
		"description": "React useContext() hook"
	},
	"useCallback": {
		"prefix": "ucb",
		"body": [
			"const ${1:memoizedCallback} = useCallback(",
			"\t() => {",
			"\t\t${2:doSomething}(${3:a}, ${4:b})",
			"\t},",
			"\t[${5:a}, ${6:b}],",
			")$0"
		],
		"description": "React useCallback() hook"
	},
	"useMemo": {
		"prefix": "ume",
		"body": [
			"const ${1:memoizedValue} = useMemo(() => ${2:computeExpensiveValue}(${3:a}, ${4:b}), [${5:a}, ${6:b}])$0"
		],
		"description": "React useMemo() hook"
	},
	"Import React": {
		"prefix": "imr",
		"body": [
			"import React from 'react';\n"
		],
		"description": "Import React"
	},
	"Import React and Component": {
		"prefix": "imrc",
		"body": [
			"import React, { Component } from 'react';\n"
		],
		"description": "Import React, { Component }"
	},
	"Import ReactDOM": {
		"prefix": "imrd",
		"body": [
			"import ReactDOM from 'react-dom';"
		],
		"description": "Import ReactDOM"
	},
	"Import React, { useState }": {
		"prefix": "imrs",
		"body": [
			"import React, { useState } from 'react';\n"
		],
		"description": "Import React, { useState }"
	},
	"Import React, { useState, useEffect }": {
		"prefix": "imrse",
		"body": [
			"import React, { useState, useEffect } from 'react';\n"
		],
		"description": "Import React, { useState, useEffect }"
	},
	"Import PropTypes": {
		"prefix": "impt",
		"body": [
			"import PropTypes from 'prop-types';"
		],
		"description": "Import PropTypes"
	},
	"Import Pure Component": {
		"prefix": "impc",
		"body": [
			"import React, { PureComponent } from 'react';\n"
		],
		"description": "Import React, { PureComponent }"
	},
	"Class Component": {
		"prefix": "cc",
		"body": [
			"class $1 extends Component {",
			"\tstate = { $2 } ",
			"\trender() { ",
			"\t\treturn ($0);",
			"\t}",
			"}",
			" ",
			"export default $1;"
		],
		"description": "Class Component"
	},
	"Class Pure Component": {
		"prefix": "cpc",
		"body": [
			"class $1 extends PureComponent {",
			"\tstate = { $2 }",
			"\trender() { ",
			"\t\treturn ( $0 );",
			"\t}",
			"}",
			" ",
			"export default $1;"
		],
		"description": "Class Pure Component"
	},
	"Class Component With Constructor": {
		"prefix": "ccc",
		"body": [
			"class $1 extends Component {",
			"\tconstructor(props) {",
			"\t\tsuper(props);",
			"\t}",
			"\tstate = { $2 }",
			"\trender() { ",
			"\t\treturn ( $0 );",
			"\t}",
			"}",
			" ",
			"export default $1;"
		],
		"description": "Class Component With Constructor"
	},
	"Stateless Function Component": {
		"prefix": "sfc",
		"body": [
			"const $1 = ($2) => {",
			"\treturn ( $0 );",
			"}",
			" ",
			"export default $1;"
		],
		"description": "Stateless Function Component"
	},
	"Function Syntax Component": {
		"prefix": "ffc",
		"body": [
			"function $1($2) {",
			"\treturn ( $0 );",
			"}",
			"",
			"export default $1;"
		],
		"description": "Function Syntax Component"
	},
	"componentDidMount": {
		"prefix": "cdm",
		"body": [
			"componentDidMount() {",
			"\t$0",
			"}"
		],
		"description": "componentDidMount"
	},
	"useEffect": {
		"prefix": "uef",
		"body": [
			"useEffect(() => {",
			"\t$1",
			"}, []);"
		],
		"description": "useEffect Hook"
	},
	"componentWillMount": {
		"prefix": "cwm",
		"body": [
			"//WARNING! To be deprecated in React v17. Use componentDidMount instead.",
			"componentWillMount() {",
			"\t$0",
			"}"
		],
		"description": "componentWillMount"
	},
	"componentWillReceiveProps": {
		"prefix": "cwrp",
		"body": [
			"//WARNING! To be deprecated in React v17. Use new lifecycle static getDerivedStateFromProps instead.",
			"componentWillReceiveProps(nextProps) {",
			"\t$0",
			"}"
		],
		"description": "componentWillReceiveProps"
	},
	"getDerivedStateFromProps": {
		"prefix": "gds",
		"body": [
			"static getDerivedStateFromProps(nextProps, prevState) {",
			"\t$0",
			"}"
		],
		"description": "getDerivedStateFromProps"
	},
	"shouldComponentUpdate": {
		"prefix": "scu",
		"body": [
			"shouldComponentUpdate(nextProps, nextState) {",
			"\t$0",
			"}"
		],
		"description": "shouldComponentUpdate"
	},
	"componentWillUpdate": {
		"prefix": "cwu",
		"body": [
			"//WARNING! To be deprecated in React v17. Use componentDidUpdate instead.",
			"componentWillUpdate(nextProps, nextState) {",
			"\t$0",
			"}"
		],
		"description": "componentWillUpdate"
	},
	"componentDidUpdate": {
		"prefix": "cdu",
		"body": [
			"componentDidUpdate(prevProps, prevState) {",
			"\t$0",
			"}"
		],
		"description": "componentDidUpdate"
	},
	"componentWillUnmount": {
		"prefix": "cwun",
		"body": [
			"componentWillUnmount() {",
			"\t$0",
			"}"
		],
		"description": "componentWillUnmount"
	},
	"componentDidCatch": {
		"prefix": "cdc",
		"body": [
			"componentDidCatch(error, info) {",
			"\t$0",
			"}"
		],
		"description": "componentDidCatch"
	},
	"getSnapshotBeforeUpdate": {
		"prefix": "gsbu",
		"body": [
			"getSnapshotBeforeUpdate(prevProps, prevState) {",
			"\t$0",
			"}"
		],
		"description": "getSnapshotBeforeUpdate"
	},
	"setState": {
		"prefix": "ss",
		"body": [
			"this.setState({ $1: $2 });"
		],
		"description": "setState"
	},
	"Functional setState": {
		"prefix": "ssf",
		"body": [
			"this.setState(prevState => {",
			"\treturn { $1: prevState.$1 };",
			"});"
		],
		"description": "Functional setState"
	},
	"Declare a new state variable using State Hook": {
		"prefix": "usf",
		"body": [
			"const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2);"
		],
		"description": "Declare a new state Variable using the State Hook. Hit Tab to apply CamelCase to function"
	},
	"render": {
		"prefix": "ren",
		"body": [
			"render() {",
			"\treturn (",
			"\t\t $0",
			"\t);",
			"}"
		],
		"description": "render"
	},
	"Render Prop": {
		"prefix": "rprop",
		"body": [
			"class $1 extends Component {",
			"\tstate = { $2: $3 }",
			"\trender() { ",
			"\t\treturn this.props.render({",
			"\t\t\t$2: this.state.$2",
			"\t\t});",
			"\t}",
			"}",
			" ",
			"export default $1;"
		],
		"description": "Render Prop"
	},
	"Higher Order Component": {
		"prefix": "hoc",
		"body": [
			"function $1($2) {",
			"\treturn class extends Component {",
			"\t\tconstructor(props) {",
			"\t\t\tsuper(props);",
			"\t\t}",
			" ",
			"\t\trender() {",
			"\t\t\treturn <$2 {...this.props} $0/>",
			"\t\t}",
			"\t}",
			"}"
		],
		"description": "Higher Order Component"
	},
	"Context Provider": {
		"prefix": "cp",
		"body": [
			"export const $1 = React.createContext();",
			"",
			"const $1Provider = (props) => {",
			"\t// Initial Provider State",
			"\tconst state = {};",
			"",
			"\t// Reducer Function",
			"\tconst $2 = (state, action) => {",
			"\t\t",
			"\t};",
			"",
			"\treturn (",
			"\t\t<$1.Provider value={{state: state, $2}}>",
			"\t\t\t{props.children}",
			"\t\t</$1.Provider>",
			"\t);",
			"}",
			"",
			"export default $1Provider;"
		],
		"description": "Context Provider"
	},
	"Class Property Function": {
		"prefix": "cpf",
		"body": [
			"$1 = (${2:e${TM_SELECTED_TEXT}}) => {",
			"\t $0",
			"};"
		],
		"description": "Class Property Function"
	}
}